* How do we deal with all the system-level header files? Right now ArbitraryText
* Copying in accessory models and rebinding must be simplified.
  to avoid the manually scripted rebinding crap, I have not renamed the copied-in module. 
  Seems to work. So far.

* How do we globally ensure that every task is only run once?
  Right now I implicitly assume that there is only one schedule with
  an "instance" of a task.
* Relying on "/usr/include/sys/timeb.h"


* Error handling in case of the queue

* How do we deal with pointers to/of queues, ringbuffers, etc.
  I think this should not be allowed
  Do we have a way to prevent types from being used as pointers?
  use can be used as pointer


TODO:
* queue refs als normal epressions

* messages and events can only be used as global var,
  otherwise they must be pointrs.
  
first run -> boolean
talk about unit for time 
wait -> await
dequeue (if avail) from data -> val
check blocking take only if blockbale queue
remove the @blocking attribute from queues  




