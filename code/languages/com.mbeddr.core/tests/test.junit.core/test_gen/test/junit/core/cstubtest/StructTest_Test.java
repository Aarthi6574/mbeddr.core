package test.junit.core.cstubtest;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.util.plugin.run.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import com.intellij.openapi.application.PathMacros;
import jetbrains.mps.smodel.SNode;
import test.junit.core.cstubtest_helper.CheckModuleContentHelper;
import junit.framework.Assert;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

@MPSLaunch
public class StructTest_Test extends BaseTransformationTest {
  @Test
  public void test_testSimpleStruct() throws Throwable {
    this.initTest("${mbeddr.github.core.home}/code/languages/com.mbeddr.core/core.dev.mpr", "r:ebbcbc09-f404-4ab3-b0c3-f9ae71bbe3f7(test.junit.core.cstubtest@tests)");
    this.runTest("test.junit.core.cstubtest.StructTest_Test$TestBody", "test_testSimpleStruct", true);
  }

  @MPSLaunch
  public static class TestBody extends BaseTestBody {
    public void test_testSimpleStruct() throws Exception {
      String pathToEnum = PathMacros.getInstance().getValue("mbeddr.github.core.home") + "/code/languages/com.mbeddr.core/tests/test.ex.core.cStubTestInclude/include";
      pathToEnum += "/structTestHeader.h";

      SNode externalModule = CheckModuleContentHelper.parsteHeader(pathToEnum);
      Assert.assertNotNull(externalModule);
      SNode fullname = (SNode) CheckModuleContentHelper.checkContentExists("fullname", SConceptOperations.findConceptDeclaration("com.mbeddr.core.udt.structure.StructDeclaration"), externalModule);
      Assert.assertNotNull(fullname);

      SNode forenameMember = (SNode) CheckModuleContentHelper.checkChildExistsInNode("forename", fullname);
      Assert.assertNotNull(forenameMember);
      // TODO: type check (char) 
      // TODO: surename test incl. typecheck 

      SNode person = (SNode) CheckModuleContentHelper.checkContentExists("person", SConceptOperations.findConceptDeclaration("com.mbeddr.core.udt.structure.StructDeclaration"), externalModule);
      Assert.assertNotNull(person);

      SNode nameMember = (SNode) CheckModuleContentHelper.checkChildExistsInNode("name", person);
      Assert.assertNotNull(nameMember);

    }
  }
}
