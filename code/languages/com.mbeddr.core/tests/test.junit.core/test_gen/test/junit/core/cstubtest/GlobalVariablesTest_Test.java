package test.junit.core.cstubtest;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.util.plugin.run.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import com.intellij.openapi.application.PathMacros;
import jetbrains.mps.smodel.SNode;
import test.junit.core.cstubtest_helper.CheckModuleContentHelper;
import junit.framework.Assert;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

@MPSLaunch
public class GlobalVariablesTest_Test extends BaseTransformationTest {
  @Test
  public void test_testSimpleGlobalVariables() throws Throwable {
    this.initTest("${mbeddr.github.core.home}/code/languages/com.mbeddr.core/core.dev.mpr", "r:ebbcbc09-f404-4ab3-b0c3-f9ae71bbe3f7(test.junit.core.cstubtest@tests)");
    this.runTest("test.junit.core.cstubtest.GlobalVariablesTest_Test$TestBody", "test_testSimpleGlobalVariables", true);
  }

  @Test
  public void test_testGlobalVariablesOfTypeDef() throws Throwable {
    this.initTest("${mbeddr.github.core.home}/code/languages/com.mbeddr.core/core.dev.mpr", "r:ebbcbc09-f404-4ab3-b0c3-f9ae71bbe3f7(test.junit.core.cstubtest@tests)");
    this.runTest("test.junit.core.cstubtest.GlobalVariablesTest_Test$TestBody", "test_testGlobalVariablesOfTypeDef", true);
  }

  @Test
  public void test_testGlobalVariablesOfStruct() throws Throwable {
    this.initTest("${mbeddr.github.core.home}/code/languages/com.mbeddr.core/core.dev.mpr", "r:ebbcbc09-f404-4ab3-b0c3-f9ae71bbe3f7(test.junit.core.cstubtest@tests)");
    this.runTest("test.junit.core.cstubtest.GlobalVariablesTest_Test$TestBody", "test_testGlobalVariablesOfStruct", true);
  }

  @Test
  public void test_testGlobalVariablesOfEnums() throws Throwable {
    this.initTest("${mbeddr.github.core.home}/code/languages/com.mbeddr.core/core.dev.mpr", "r:ebbcbc09-f404-4ab3-b0c3-f9ae71bbe3f7(test.junit.core.cstubtest@tests)");
    this.runTest("test.junit.core.cstubtest.GlobalVariablesTest_Test$TestBody", "test_testGlobalVariablesOfEnums", true);
  }

  @MPSLaunch
  public static class TestBody extends BaseTestBody {
    public void test_testSimpleGlobalVariables() throws Exception {
      String pathToEnum = PathMacros.getInstance().getValue("mbeddr.github.core.home") + "/code/languages/com.mbeddr.core/tests/test.ex.core.cStubTestInclude/include";
      pathToEnum += "/globalVariablesTestHeader.h";

      SNode externalModule = CheckModuleContentHelper.parsteHeader(pathToEnum);
      Assert.assertNotNull(externalModule);
      SNode i1 = (SNode) CheckModuleContentHelper.checkContentExists("i1", SConceptOperations.findConceptDeclaration("com.mbeddr.core.modules.structure.GlobalVariableDeclaration"), externalModule);
      Assert.assertNotNull(i1);
      Assert.assertTrue(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(i1, "type", true), "com.mbeddr.core.expressions.structure.IntType"));

      SNode i2 = (SNode) CheckModuleContentHelper.checkContentExists("i2", SConceptOperations.findConceptDeclaration("com.mbeddr.core.modules.structure.GlobalVariableDeclaration"), externalModule);
      Assert.assertNotNull(i2);
      Assert.assertTrue(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(i2, "type", true), "com.mbeddr.core.pointers.structure.PointerType"));
      Assert.assertTrue(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(i2, "type", true), "com.mbeddr.core.pointers.structure.PointerType"), "baseType", true), "com.mbeddr.core.pointers.structure.PointerType"));
      Assert.assertTrue(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(i2, "type", true), "com.mbeddr.core.pointers.structure.PointerType"), "baseType", true), "com.mbeddr.core.pointers.structure.PointerType"), "baseType", true), "com.mbeddr.core.pointers.structure.ArrayType"));
      Assert.assertTrue(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(i2, "type", true), "com.mbeddr.core.pointers.structure.PointerType"), "baseType", true), "com.mbeddr.core.pointers.structure.PointerType"), "baseType", true), "com.mbeddr.core.pointers.structure.ArrayType"), "baseType", true), "com.mbeddr.core.pointers.structure.ArrayType"));
      Assert.assertTrue(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(i2, "type", true), "com.mbeddr.core.pointers.structure.PointerType"), "baseType", true), "com.mbeddr.core.pointers.structure.PointerType"), "baseType", true), "com.mbeddr.core.pointers.structure.ArrayType"), "baseType", true), "com.mbeddr.core.pointers.structure.ArrayType"), "baseType", true), "com.mbeddr.core.expressions.structure.IntType"));
    }

    public void test_testGlobalVariablesOfTypeDef() throws Exception {
      String pathToEnum = PathMacros.getInstance().getValue("mbeddr.github.core.home") + "/code/languages/com.mbeddr.core/tests/test.ex.core.cStubTestInclude/include";
      pathToEnum += "/globalVariablesTestHeader.h";

      SNode externalModule = CheckModuleContentHelper.parsteHeader(pathToEnum);
      Assert.assertNotNull(externalModule);

      SNode typeDefAR = (SNode) CheckModuleContentHelper.checkContentExists("ar", SConceptOperations.findConceptDeclaration("com.mbeddr.core.udt.structure.TypeDef"), externalModule);
      Assert.assertNotNull(typeDefAR);
      SNode typeDefARR = (SNode) CheckModuleContentHelper.checkContentExists("arr", SConceptOperations.findConceptDeclaration("com.mbeddr.core.udt.structure.TypeDef"), externalModule);
      Assert.assertNotNull(typeDefARR);
      SNode typeDefPAR = (SNode) CheckModuleContentHelper.checkContentExists("par", SConceptOperations.findConceptDeclaration("com.mbeddr.core.udt.structure.TypeDef"), externalModule);
      Assert.assertNotNull(typeDefPAR);

      SNode typeDefV1 = (SNode) CheckModuleContentHelper.checkContentExists("typeDefV1", SConceptOperations.findConceptDeclaration("com.mbeddr.core.modules.structure.GlobalVariableDeclaration"), externalModule);
      Assert.assertNotNull(typeDefV1);
      Assert.assertTrue(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(typeDefV1, "type", true), "com.mbeddr.core.udt.structure.TypeDefType"));
      Assert.assertTrue(SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(typeDefV1, "type", true), "com.mbeddr.core.udt.structure.TypeDefType"), "typeDef", false), "name").equals(SPropertyOperations.getString(typeDefAR, "name")));

      SNode typeDefV2 = (SNode) CheckModuleContentHelper.checkContentExists("typeDefV2", SConceptOperations.findConceptDeclaration("com.mbeddr.core.modules.structure.GlobalVariableDeclaration"), externalModule);
      Assert.assertNotNull(typeDefV2);
      Assert.assertTrue(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(typeDefV2, "type", true), "com.mbeddr.core.pointers.structure.PointerType"));
      Assert.assertTrue(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(typeDefV2, "type", true), "com.mbeddr.core.pointers.structure.PointerType"), "baseType", true), "com.mbeddr.core.udt.structure.TypeDefType"));
      Assert.assertTrue(SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(typeDefV2, "type", true), "com.mbeddr.core.pointers.structure.PointerType"), "baseType", true), "com.mbeddr.core.udt.structure.TypeDefType"), "typeDef", false), "name").equals(SPropertyOperations.getString(typeDefARR, "name")));

      SNode typeDefV3 = (SNode) CheckModuleContentHelper.checkContentExists("typeDefV3", SConceptOperations.findConceptDeclaration("com.mbeddr.core.modules.structure.GlobalVariableDeclaration"), externalModule);
      Assert.assertNotNull(typeDefV3);

      SNode typeDefV4 = (SNode) CheckModuleContentHelper.checkContentExists("typeDefV4", SConceptOperations.findConceptDeclaration("com.mbeddr.core.modules.structure.GlobalVariableDeclaration"), externalModule);
      Assert.assertNotNull(typeDefV4);
      Assert.assertTrue(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(typeDefV4, "type", true), "com.mbeddr.core.pointers.structure.PointerType"));
      Assert.assertTrue(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(typeDefV4, "type", true), "com.mbeddr.core.pointers.structure.PointerType"), "baseType", true), "com.mbeddr.core.pointers.structure.ArrayType"));
      Assert.assertTrue(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(typeDefV4, "type", true), "com.mbeddr.core.pointers.structure.PointerType"), "baseType", true), "com.mbeddr.core.pointers.structure.ArrayType"), "baseType", true), "com.mbeddr.core.udt.structure.TypeDefType"));
      Assert.assertTrue(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(typeDefV4, "type", true), "com.mbeddr.core.pointers.structure.PointerType"), "baseType", true), "com.mbeddr.core.pointers.structure.ArrayType"), "baseType", true), "com.mbeddr.core.udt.structure.TypeDefType"), "typeDef", false), "original", true), "com.mbeddr.core.pointers.structure.PointerType"));
    }

    public void test_testGlobalVariablesOfStruct() throws Exception {
      String pathToEnum = PathMacros.getInstance().getValue("mbeddr.github.core.home") + "/code/languages/com.mbeddr.core/tests/test.ex.core.cStubTestInclude/include";
      pathToEnum += "/globalVariablesTestHeader.h";

      SNode externalModule = CheckModuleContentHelper.parsteHeader(pathToEnum);
      Assert.assertNotNull(externalModule);

      SNode person = (SNode) CheckModuleContentHelper.checkContentExists("person", SConceptOperations.findConceptDeclaration("com.mbeddr.core.udt.structure.StructDeclaration"), externalModule);
      Assert.assertNotNull(person);

      SNode p = (SNode) CheckModuleContentHelper.checkContentExists("p", SConceptOperations.findConceptDeclaration("com.mbeddr.core.modules.structure.GlobalVariableDeclaration"), externalModule);
      Assert.assertNotNull(p);
      Assert.assertTrue(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(p, "type", true), "com.mbeddr.core.udt.structure.StructType"));
      Assert.assertTrue(SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(p, "type", true), "com.mbeddr.core.udt.structure.StructType"), "struct", false), "name").equals(SPropertyOperations.getString(person, "name")));

      SNode pp = (SNode) CheckModuleContentHelper.checkContentExists("pp", SConceptOperations.findConceptDeclaration("com.mbeddr.core.modules.structure.GlobalVariableDeclaration"), externalModule);
      Assert.assertNotNull(pp);
      Assert.assertTrue(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(pp, "type", true), "com.mbeddr.core.pointers.structure.PointerType"));
      Assert.assertTrue(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(pp, "type", true), "com.mbeddr.core.pointers.structure.PointerType"), "baseType", true), "com.mbeddr.core.udt.structure.StructType"));
      Assert.assertTrue(SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(pp, "type", true), "com.mbeddr.core.pointers.structure.PointerType"), "baseType", true), "com.mbeddr.core.udt.structure.StructType"), "struct", false), "name").equals(SPropertyOperations.getString(person, "name")));
    }

    public void test_testGlobalVariablesOfEnums() throws Exception {
      String pathToEnum = PathMacros.getInstance().getValue("mbeddr.github.core.home") + "/code/languages/com.mbeddr.core/tests/test.ex.core.cStubTestInclude/include";
      pathToEnum += "/globalVariablesTestHeader.h";

      SNode externalModule = CheckModuleContentHelper.parsteHeader(pathToEnum);
      Assert.assertNotNull(externalModule);

      SNode simpleMonths = (SNode) CheckModuleContentHelper.checkContentExists("simpleMonths", SConceptOperations.findConceptDeclaration("com.mbeddr.core.udt.structure.EnumDeclaration"), externalModule);
      Assert.assertNotNull(simpleMonths);
    }
  }
}
