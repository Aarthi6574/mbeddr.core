package test.junit.core.cstubtest;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.util.plugin.run.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import com.intellij.openapi.application.PathMacros;
import com.mbeddr.core.modules.runtime.include.ParseUtil;
import junit.framework.Assert;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

@MPSLaunch
public class IncludeTest_Test extends BaseTransformationTest {
  @Test
  public void test_testRecursiveInclude() throws Throwable {
    this.initTest("${mbeddr.github.core.home}/code/languages/com.mbeddr.core/core.dev.mpr", "r:ebbcbc09-f404-4ab3-b0c3-f9ae71bbe3f7(test.junit.core.cstubtest@tests)");
    this.runTest("test.junit.core.cstubtest.IncludeTest_Test$TestBody", "test_testRecursiveInclude", true);
  }

  @MPSLaunch
  public static class TestBody extends BaseTestBody {
    public void test_testRecursiveInclude() throws Exception {
      this.cleanUp();

      String pathToModulUsesTypeDef = PathMacros.getInstance().getValue("mbeddr.github.core.home") + "/code/languages/com.mbeddr.core/tests/test.ex.core.cStubTestInclude/include";
      pathToModulUsesTypeDef += "/ModuleUsesTypeDef.h";
      String pathToModuleWithTypeDef = PathMacros.getInstance().getValue("mbeddr.github.core.home") + "/code/languages/com.mbeddr.core/tests/test.ex.core.cStubTestInclude/include";
      pathToModuleWithTypeDef += "/ModuleWithTypeDef.h";

      System.out.println("ROOTS Count before: " + this.myModel.getSModel().rootsCount());
      int countBefore = this.myModel.getSModel().rootsCount();
      ParseUtil.parseHFile(pathToModulUsesTypeDef, this.myModel.getSModel());
      Assert.assertEquals(2, this.myModel.getSModel().rootsCount() - countBefore);

      ParseUtil.parseHFile(pathToModuleWithTypeDef, this.myModel.getSModel());
      Assert.assertEquals(2, this.myModel.getSModel().rootsCount() - countBefore);


      System.out.println("ROOTS Count after: " + this.myModel.getSModel().rootsCount());
    }

    public void cleanUp() {
      for (SNode root : Sequence.fromIterable(this.myModel.getSModel().roots())) {
        if (root.isInstanceOfConcept(SNodeOperations.getNode("r:75ecab8a-8931-4140-afc6-4b46398710fc(com.mbeddr.core.modules.structure)", "6116558314501417921"))) {
          this.myModel.getSModel().removeRoot(root);
        }
      }

    }
  }
}
