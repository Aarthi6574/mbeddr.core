package test.junit.core.cstubtest;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.util.plugin.run.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import com.intellij.openapi.application.PathMacros;
import jetbrains.mps.smodel.SNode;
import test.junit.core.cstubtest_helper.CheckModuleContentHelper;
import junit.framework.Assert;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

@MPSLaunch
public class DefineTest_Test extends BaseTransformationTest {
  @Test
  public void test_testGlobalConstantFunction() throws Throwable {
    this.initTest("${mbeddr.github.core.home}/code/languages/com.mbeddr.core/core.dev.mpr", "r:ebbcbc09-f404-4ab3-b0c3-f9ae71bbe3f7(test.junit.core.cstubtest@tests)");
    this.runTest("test.junit.core.cstubtest.DefineTest_Test$TestBody", "test_testGlobalConstantFunction", true);
  }

  @MPSLaunch
  public static class TestBody extends BaseTestBody {
    public void test_testGlobalConstantFunction() throws Exception {
      String pathToDefineHeader = PathMacros.getInstance().getValue("mbeddr.github.core.home") + "/code/languages/com.mbeddr.core/tests/test.ex.core.cStubTestInclude/include";
      pathToDefineHeader += "/defineTestHeader.h";

      SNode externalModule = CheckModuleContentHelper.parsteHeader(pathToDefineHeader);
      Assert.assertNotNull(externalModule);

      SNode mul = (SNode) CheckModuleContentHelper.checkContentExists("MUL", SConceptOperations.findConceptDeclaration("com.mbeddr.core.modules.structure.GlobalConstantFunctionDeclaration"), externalModule);
      Assert.assertNotNull(mul);
      Assert.assertEquals(2, ListSequence.fromList(SLinkOperations.getTargets(mul, "arguments", true)).count());
      Assert.assertEquals("i", SPropertyOperations.getString(ListSequence.fromList(SLinkOperations.getTargets(mul, "arguments", true)).getElement(0), "name"));
      Assert.assertEquals("j", SPropertyOperations.getString(ListSequence.fromList(SLinkOperations.getTargets(mul, "arguments", true)).getElement(1), "name"));
      Assert.assertEquals("(i*j)", SPropertyOperations.getString(mul, "body"));

    }

    public void cleanUp() {
      for (SNode root : Sequence.fromIterable(this.myModel.getSModel().roots())) {
        if (root.isInstanceOfConcept(SNodeOperations.getNode("r:75ecab8a-8931-4140-afc6-4b46398710fc(com.mbeddr.core.modules.structure)", "6116558314501417921"))) {
          this.myModel.getSModel().removeRoot(root);
        }
      }

    }
  }
}
