package test.junit.core.cstubtest;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.util.plugin.run.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import com.intellij.openapi.application.PathMacros;
import jetbrains.mps.smodel.SNode;
import test.junit.core.cstubtest_helper.CheckModuleContentHelper;
import junit.framework.Assert;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;

@MPSLaunch
public class TypeTest_Test extends BaseTransformationTest {
  @Test
  public void test_testUnsignedTypes() throws Throwable {
    this.initTest("${mbeddr.github.core.home}/code/languages/com.mbeddr.core/core.dev.mpr", "r:ebbcbc09-f404-4ab3-b0c3-f9ae71bbe3f7(test.junit.core.cstubtest@tests)");
    this.runTest("test.junit.core.cstubtest.TypeTest_Test$TestBody", "test_testUnsignedTypes", true);
  }

  @Test
  public void test_testC99Types() throws Throwable {
    this.initTest("${mbeddr.github.core.home}/code/languages/com.mbeddr.core/core.dev.mpr", "r:ebbcbc09-f404-4ab3-b0c3-f9ae71bbe3f7(test.junit.core.cstubtest@tests)");
    this.runTest("test.junit.core.cstubtest.TypeTest_Test$TestBody", "test_testC99Types", true);
  }

  @MPSLaunch
  public static class TestBody extends BaseTestBody {
    public void test_testUnsignedTypes() throws Exception {
      String pathToEnum = PathMacros.getInstance().getValue("mbeddr.github.core.home") + "/code/languages/com.mbeddr.core/tests/test.ex.core.cStubTestInclude/include";
      pathToEnum += "/typesTestHeader.h";

      SNode externalModule = CheckModuleContentHelper.parsteHeader(pathToEnum);
      Assert.assertNotNull(externalModule);
      SNode unsignedChar = (SNode) CheckModuleContentHelper.checkContentExists("unsignedChar", SConceptOperations.findConceptDeclaration("com.mbeddr.core.modules.structure.GlobalVariableDeclaration"), externalModule);
      Assert.assertNotNull(unsignedChar);
      Assert.assertTrue(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(unsignedChar, "type", true), "com.mbeddr.core.expressions.structure.UnsignedCharType"));

      SNode unsignedInt = (SNode) CheckModuleContentHelper.checkContentExists("unsignedInt", SConceptOperations.findConceptDeclaration("com.mbeddr.core.modules.structure.GlobalVariableDeclaration"), externalModule);
      Assert.assertNotNull(unsignedInt);
      Assert.assertTrue(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(unsignedInt, "type", true), "com.mbeddr.core.expressions.structure.UnsignedIntType"));

      SNode unsignedShort = (SNode) CheckModuleContentHelper.checkContentExists("unsignedShort", SConceptOperations.findConceptDeclaration("com.mbeddr.core.modules.structure.GlobalVariableDeclaration"), externalModule);
      Assert.assertNotNull(unsignedShort);
      Assert.assertTrue(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(unsignedShort, "type", true), "com.mbeddr.core.expressions.structure.UnsignedShortType"));

      SNode unsignedLong = (SNode) CheckModuleContentHelper.checkContentExists("unsignedLong", SConceptOperations.findConceptDeclaration("com.mbeddr.core.modules.structure.GlobalVariableDeclaration"), externalModule);
      Assert.assertNotNull(unsignedLong);
      Assert.assertTrue(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(unsignedLong, "type", true), "com.mbeddr.core.expressions.structure.UnsignedLongType"));

      SNode unsignedLongLong = (SNode) CheckModuleContentHelper.checkContentExists("unsignedLongLong", SConceptOperations.findConceptDeclaration("com.mbeddr.core.modules.structure.GlobalVariableDeclaration"), externalModule);
      Assert.assertNotNull(unsignedLongLong);
      Assert.assertTrue(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(unsignedLongLong, "type", true), "com.mbeddr.core.expressions.structure.UnsignedLongLongType"));
    }

    public void test_testC99Types() throws Exception {
      String pathToEnum = PathMacros.getInstance().getValue("mbeddr.github.core.home") + "/code/languages/com.mbeddr.core/tests/test.ex.core.cStubTestInclude/include";
      pathToEnum += "/typesTestHeader.h";

      SNode externalModule = CheckModuleContentHelper.parsteHeader(pathToEnum);
      Assert.assertNotNull(externalModule);
      SNode i8 = (SNode) CheckModuleContentHelper.checkContentExists("i8", SConceptOperations.findConceptDeclaration("com.mbeddr.core.modules.structure.GlobalVariableDeclaration"), externalModule);
      Assert.assertNotNull(i8);
      Assert.assertTrue(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(i8, "type", true), "com.mbeddr.core.expressions.structure.Int8tType"));

      SNode i16 = (SNode) CheckModuleContentHelper.checkContentExists("i16", SConceptOperations.findConceptDeclaration("com.mbeddr.core.modules.structure.GlobalVariableDeclaration"), externalModule);
      Assert.assertNotNull(i16);
      Assert.assertTrue(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(i16, "type", true), "com.mbeddr.core.expressions.structure.Int16tType"));

      SNode i32 = (SNode) CheckModuleContentHelper.checkContentExists("i32", SConceptOperations.findConceptDeclaration("com.mbeddr.core.modules.structure.GlobalVariableDeclaration"), externalModule);
      Assert.assertNotNull(i32);
      Assert.assertTrue(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(i32, "type", true), "com.mbeddr.core.expressions.structure.Int32tType"));

      SNode i64 = (SNode) CheckModuleContentHelper.checkContentExists("i64", SConceptOperations.findConceptDeclaration("com.mbeddr.core.modules.structure.GlobalVariableDeclaration"), externalModule);
      Assert.assertNotNull(i64);
      Assert.assertTrue(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(i64, "type", true), "com.mbeddr.core.expressions.structure.Int64tType"));

      SNode ui8 = (SNode) CheckModuleContentHelper.checkContentExists("ui8", SConceptOperations.findConceptDeclaration("com.mbeddr.core.modules.structure.GlobalVariableDeclaration"), externalModule);
      Assert.assertNotNull(ui8);
      Assert.assertTrue(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(ui8, "type", true), "com.mbeddr.core.expressions.structure.UnsignedInt8tType"));

      SNode ui16 = (SNode) CheckModuleContentHelper.checkContentExists("ui16", SConceptOperations.findConceptDeclaration("com.mbeddr.core.modules.structure.GlobalVariableDeclaration"), externalModule);
      Assert.assertNotNull(ui16);
      Assert.assertTrue(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(ui16, "type", true), "com.mbeddr.core.expressions.structure.UnsignedInt16tType"));

      SNode ui32 = (SNode) CheckModuleContentHelper.checkContentExists("ui32", SConceptOperations.findConceptDeclaration("com.mbeddr.core.modules.structure.GlobalVariableDeclaration"), externalModule);
      Assert.assertNotNull(ui32);
      Assert.assertTrue(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(ui32, "type", true), "com.mbeddr.core.expressions.structure.UnsignedInt32tType"));

      SNode ui64 = (SNode) CheckModuleContentHelper.checkContentExists("ui64", SConceptOperations.findConceptDeclaration("com.mbeddr.core.modules.structure.GlobalVariableDeclaration"), externalModule);
      Assert.assertNotNull(ui64);
      Assert.assertTrue(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(ui64, "type", true), "com.mbeddr.core.expressions.structure.UnsignedInt64tType"));

    }

    public void cleanUp() {
      for (SNode root : Sequence.fromIterable(this.myModel.getSModel().roots())) {
        if (root.isInstanceOfConcept(SNodeOperations.getNode("r:75ecab8a-8931-4140-afc6-4b46398710fc(com.mbeddr.core.modules.structure)", "6116558314501417921"))) {
          this.myModel.getSModel().removeRoot(root);
        }
      }

    }
  }
}
