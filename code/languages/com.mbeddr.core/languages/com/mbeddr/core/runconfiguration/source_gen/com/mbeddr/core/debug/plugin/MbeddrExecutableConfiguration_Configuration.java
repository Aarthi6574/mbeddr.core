package com.mbeddr.core.debug.plugin;

/*Generated by MPS */

import jetbrains.mps.execution.api.configurations.BaseMpsRunConfiguration;
import jetbrains.mps.execution.api.settings.IPersistentConfiguration;
import jetbrains.mps.logging.Logger;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.execution.configurations.lib.Node_Configuration;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import com.intellij.openapi.project.Project;
import com.intellij.execution.configurations.RuntimeConfigurationException;
import org.jdom.Element;
import com.intellij.openapi.util.WriteExternalException;
import com.intellij.util.xmlb.XmlSerializer;
import com.intellij.openapi.util.InvalidDataException;
import org.jetbrains.annotations.Nullable;
import com.intellij.execution.configurations.RunProfileState;
import com.intellij.execution.Executor;
import com.intellij.execution.runners.ExecutionEnvironment;
import com.intellij.execution.ExecutionException;
import com.intellij.openapi.options.SettingsEditor;
import com.intellij.openapi.util.JDOMExternalizable;
import com.intellij.execution.runners.ProgramRunner;
import com.intellij.execution.configurations.ConfigurationInfoProvider;
import jetbrains.mps.execution.api.settings.SettingsEditorEx;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class MbeddrExecutableConfiguration_Configuration extends BaseMpsRunConfiguration implements IPersistentConfiguration {
  private static final Logger LOG = Logger.getLogger(MbeddrExecutableConfiguration_Configuration.class);

  @NotNull
  private MbeddrExecutableConfiguration_Configuration.MyState myState = new MbeddrExecutableConfiguration_Configuration.MyState();
  private Node_Configuration myBinary = new Node_Configuration(new _FunctionTypes._return_P0_E0<SNode>() {
    public SNode invoke() {
      final SNode[] conceptDeclaration = new SNode[1];
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          conceptDeclaration[0] = SConceptOperations.findConceptDeclaration("com.mbeddr.core.buildconfig.structure.Binary");
        }
      });
      return conceptDeclaration[0];
    }
  }.invoke(), new _FunctionTypes._return_P1_E0<Boolean, SNode>() {
    public Boolean invoke(SNode buildConfig) {
      return true;
    }
  });

  public MbeddrExecutableConfiguration_Configuration(Project project, MbeddrExecutableConfiguration_Configuration_Factory factory, String name) {
    super(project, factory, name);
  }

  public void checkConfiguration() throws RuntimeConfigurationException {
    this.getBinary().checkConfiguration();
  }

  @Override
  public void writeExternal(Element element) throws WriteExternalException {
    element.addContent(XmlSerializer.serialize(myState));
    {
      Element fieldElement = new Element("myBinary");
      myBinary.writeExternal(fieldElement);
      element.addContent(fieldElement);
    }
  }

  @Override
  public void readExternal(Element element) throws InvalidDataException {
    if (element == null) {
      throw new InvalidDataException("Cant read " + this + ": element is null.");
    }
    XmlSerializer.deserializeInto(myState, (Element) element.getChildren().get(0));
    {
      Element fieldElement = element.getChild("myBinary");
      myBinary.readExternal(fieldElement);
    }
  }

  public Node_Configuration getBinary() {
    return myBinary;
  }

  @Override
  public MbeddrExecutableConfiguration_Configuration clone() {
    MbeddrExecutableConfiguration_Configuration clone = null;
    try {
      clone = createCloneTemplate();
      clone.myState = (MbeddrExecutableConfiguration_Configuration.MyState) myState.clone();
      clone.myBinary = (Node_Configuration) myBinary.clone();
      return clone;
    } catch (CloneNotSupportedException ex) {
      MbeddrExecutableConfiguration_Configuration.LOG.error(ex);
    }
    return clone;
  }

  @Nullable
  public RunProfileState getState(@NotNull Executor executor, @NotNull ExecutionEnvironment environment) throws ExecutionException {
    return new MbeddrExecutableConfiguration_Configuration_RunProfileState(this, executor, environment);
  }

  @Nullable
  public SettingsEditor<JDOMExternalizable> getRunnerSettingsEditor(ProgramRunner runner) {
    return null;
  }

  public JDOMExternalizable createRunnerSettings(ConfigurationInfoProvider provider) {
    return null;
  }

  public SettingsEditorEx<MbeddrExecutableConfiguration_Configuration> getConfigurationEditor() {
    return (SettingsEditorEx<MbeddrExecutableConfiguration_Configuration>) getEditor();
  }

  public MbeddrExecutableConfiguration_Configuration createCloneTemplate() {
    return (MbeddrExecutableConfiguration_Configuration) super.clone();
  }

  public SettingsEditorEx<? extends IPersistentConfiguration> getEditor() {
    return new MbeddrExecutableConfiguration_Configuration_Editor(myBinary.getEditor());
  }

  @Override
  public boolean canExecute(String executorId) {
    return MbeddrExecutableConfiguration_Configuration_RunProfileState.canExecute(executorId);
  }

  public Object[] createrunMakeTask() {
    return new Object[]{SNodeOperations.cast(this.getBinary().getNode(), "com.mbeddr.core.buildconfig.structure.Binary")};
  }

  public class MyState {
    public MyState() {
    }

    @Override
    public Object clone() throws CloneNotSupportedException {
      MbeddrExecutableConfiguration_Configuration.MyState state = new MbeddrExecutableConfiguration_Configuration.MyState();
      return state;
    }
  }
}
