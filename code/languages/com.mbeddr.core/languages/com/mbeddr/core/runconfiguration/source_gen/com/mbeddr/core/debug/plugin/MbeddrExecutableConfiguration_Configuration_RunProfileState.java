package com.mbeddr.core.debug.plugin;

/*Generated by MPS */

import jetbrains.mps.debug.api.run.DebuggerRunProfileState;
import com.intellij.execution.configurations.RunProfileState;
import jetbrains.mps.logging.Logger;
import org.jetbrains.annotations.NotNull;
import com.intellij.execution.runners.ExecutionEnvironment;
import com.intellij.execution.Executor;
import com.intellij.execution.configurations.ConfigurationPerRunnerSettings;
import com.intellij.execution.configurations.RunnerSettings;
import org.jetbrains.annotations.Nullable;
import com.intellij.execution.ExecutionResult;
import com.intellij.execution.runners.ProgramRunner;
import com.intellij.execution.ExecutionException;
import com.intellij.openapi.project.Project;
import com.intellij.execution.process.ProcessHandler;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import com.intellij.execution.ui.ConsoleView;
import jetbrains.mps.execution.api.configurations.ConsoleCreator;
import jetbrains.mps.execution.api.configurations.ConsoleProcessListener;
import jetbrains.mps.execution.api.configurations.DefaultExecutionResult;
import jetbrains.mps.execution.api.configurations.DefaultExecutionConsole;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.debug.api.run.IDebuggerConfiguration;
import jetbrains.mps.debug.api.IDebuggerSettings;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import com.mbeddr.core.debug.debugger.MbeddrDebuggerSettings;
import jetbrains.mps.smodel.ModelAccess;
import com.mbeddr.core.buildconfig.behavior.Binary_Behavior;
import jetbrains.mps.debug.api.IDebugger;
import jetbrains.mps.debug.api.Debuggers;
import com.intellij.execution.executors.DefaultRunExecutor;
import com.intellij.execution.executors.DefaultDebugExecutor;

public class MbeddrExecutableConfiguration_Configuration_RunProfileState extends DebuggerRunProfileState implements RunProfileState {
  private static Logger LOG = Logger.getLogger(MbeddrExecutableConfiguration_Configuration_RunProfileState.class);

  @NotNull
  private final MbeddrExecutableConfiguration_Configuration myRunConfiguration;
  @NotNull
  private final ExecutionEnvironment myEnvironment;

  public MbeddrExecutableConfiguration_Configuration_RunProfileState(@NotNull MbeddrExecutableConfiguration_Configuration configuration, @NotNull Executor executor, @NotNull ExecutionEnvironment environment) {
    myRunConfiguration = configuration;
    myEnvironment = environment;
  }

  public ConfigurationPerRunnerSettings getConfigurationSettings() {
    return null;
  }

  public RunnerSettings getRunnerSettings() {
    return null;
  }

  @Nullable
  public ExecutionResult execute(Executor executor, @NotNull ProgramRunner runner) throws ExecutionException {
    Project project = myEnvironment.getProject();
    //  we run execute if we're not in debug mode! 
    ProcessHandler result = null;
    if (myDebuggerSettings.isEmpty()) {
      result = new RunCProgram_Command().createProcess(SNodeOperations.cast(myRunConfiguration.getBinary().getNode(), "com.mbeddr.core.buildconfig.structure.Binary"));
    }
    {
      ProcessHandler _processHandler = result;
      final ConsoleView _consoleView = ConsoleCreator.createConsoleView(project, false);
      _processHandler.addProcessListener(new ConsoleProcessListener(_consoleView));
      return new DefaultExecutionResult(_processHandler, new DefaultExecutionConsole(_consoleView.getComponent(), new _FunctionTypes._void_P0_E0() {
        public void invoke() {
          _consoleView.dispose();
        }
      }));
    }
  }

  @NotNull
  public IDebuggerConfiguration getDebuggerConfiguration() {
    return new IDebuggerConfiguration() {
      @Nullable
      public IDebuggerSettings createDebuggerSettings() {
        final Wrappers._T<MbeddrDebuggerSettings> settings = new Wrappers._T<MbeddrDebuggerSettings>();
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            String exeName = Binary_Behavior.call_executableFileName_745648737914693790((SNodeOperations.cast(myRunConfiguration.getBinary().getNode(), "com.mbeddr.core.buildconfig.structure.Binary")));
            LOG.info("exe: " + exeName);
            String path = Util.getPath((SNodeOperations.cast(myRunConfiguration.getBinary().getNode(), "com.mbeddr.core.buildconfig.structure.Binary"))).getParent().getAbsolutePath();
            String tracePath = path;
            String fullPath = path + "/" + exeName;
            LOG.info("path: " + fullPath);
            settings.value = new MbeddrDebuggerSettings(myRunConfiguration.getProject(), fullPath, myRunConfiguration.getBinary().getNode(), tracePath);
          }
        });
        return settings.value;
      }

      public IDebugger getDebugger() {
        return Debuggers.getInstance().getDebuggerByName("Mbeddr");
      }
    };
  }

  public static boolean canExecute(String executorId) {
    if (DefaultRunExecutor.EXECUTOR_ID.equals(executorId)) {
      return true;
    }
    if (DefaultDebugExecutor.EXECUTOR_ID.equals(executorId)) {
      return true;
    }
    return false;
  }
}
