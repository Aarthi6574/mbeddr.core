package com.mbeddr.core.debug.plugin;

/*Generated by MPS */

import jetbrains.mps.execution.api.configurations.BaseMpsBeforeTaskProvider;
import com.intellij.openapi.util.Key;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.smodel.SNode;
import com.intellij.openapi.project.Project;
import java.util.concurrent.CountDownLatch;
import com.intellij.execution.process.ProcessHandler;
import jetbrains.mps.execution.api.commands.OutputRedirector;
import com.intellij.execution.process.ProcessAdapter;
import com.intellij.execution.process.ProcessEvent;
import com.intellij.execution.process.ProcessOutputTypes;

public class RunMake_BeforeTask extends BaseMpsBeforeTaskProvider<RunMake_BeforeTask.RunMake_BeforeTask_RunTask> {
  private static final Key<RunMake_BeforeTask.RunMake_BeforeTask_RunTask> KEY = Key.create("com.mbeddr.core.debug.plugin.RunMake_BeforeTask");
  private static Logger LOG = Logger.getLogger(RunMake_BeforeTask.class);

  public RunMake_BeforeTask() {
    super("run Make");
  }

  protected RunMake_BeforeTask.RunMake_BeforeTask_RunTask createTaskImpl() {
    return new RunMake_BeforeTask.RunMake_BeforeTask_RunTask();
  }

  public Key<RunMake_BeforeTask.RunMake_BeforeTask_RunTask> getId() {
    return KEY;
  }

  public static class RunMake_BeforeTask_RunTask extends BaseMpsBeforeTaskProvider.BaseMpsBeforeRunTask {
    private SNode myBinary;

    public RunMake_BeforeTask_RunTask() {
    }

    public boolean configure(SNode binary) {
      myBinary = binary;
      return true;
    }

    public boolean execute(Project project) {
      final CountDownLatch cdl = new CountDownLatch(1);
      try {
        ProcessHandler doSth = OutputRedirector.redirect(new Make_Command().createProcess(myBinary), new ProcessAdapter() {
          @Override
          public void processTerminated(ProcessEvent event) {
            LOG.info("make terminated");
            cdl.countDown();
          }

          @Override
          public void onTextAvailable(ProcessEvent event, Key key) {
            if (ProcessOutputTypes.STDERR.equals(key)) {
              LOG.error(event.getText());
            } else {
              LOG.info(event.getText());
            }
          }

          @Override
          public void startNotified(ProcessEvent event) {
            LOG.info("make started");
          }
        });
        doSth.startNotify();
        cdl.await();
      } catch (Exception e) {
      }
      return true;
    }
  }
}
