package com.mbeddr.core.runconfiguration.plugin;

/*Generated by MPS */

import jetbrains.mps.logging.Logger;
import com.intellij.execution.process.ProcessHandler;
import jetbrains.mps.smodel.SNode;
import com.intellij.execution.ExecutionException;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.execution.api.commands.ProcessHandlerBuilder;
import com.mbeddr.core.buildconfig.behavior.Binary_Behavior;
import java.io.File;

public class RunCProgram_Command {
  private static Logger LOG = Logger.getLogger(RunCProgram_Command.class);

  public RunCProgram_Command() {
  }

  public ProcessHandler createProcess(final SNode binary) throws ExecutionException {
    final IFile execFile = Util.getPath(binary);
    final Wrappers._T<ProcessHandler> result = new Wrappers._T<ProcessHandler>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        try {
          if (RunCProgram_Command.isWindowsOS()) {
            result.value = new ProcessHandlerBuilder().append("cmd /C " + Binary_Behavior.call_executableFileName_745648737914693790(binary)).build(new File(execFile.getParent().getAbsolutePath()));
          } else {
            result.value = new ProcessHandlerBuilder().append("./" + Binary_Behavior.call_executableFileName_745648737914693790(binary)).build(new File(execFile.getParent().getAbsolutePath()));
          }
        } catch (Exception e) {
          LOG.error("exception thrown", e);
        }
      }
    });

    LOG.info("executable called!");
    return result.value;
  }

  private static boolean isWindowsOS() {
    return System.getProperty("os.name").toLowerCase().contains("win");
  }
}
