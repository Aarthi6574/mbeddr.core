package com.mbeddr.core.debug.test.runtime.m1;

/*Generated by MPS */

import com.google.inject.Injector;
import com.intellij.openapi.project.Project;
import jetbrains.mps.smodel.SModel;
import com.google.inject.Guice;
import com.mbeddr.core.debug.debugger.MapperModule;
import com.mbeddr.core.debug.debugger.EclipseCdtWrapperModule;
import com.mbeddr.core.debug.debugger.TracingWrapperModule;
import com.mbeddr.core.debug.debugger.CDebuggerWrapperModule;
import com.google.inject.AbstractModule;
import com.google.inject.name.Names;

public class TestRuntime {
  private Injector injector = null;

  public TestRuntime() {
  }

  public ITRSession createSession(Project project, SModel model, String binaryPath, String tracePath) throws IllegalArgumentException {
    if (model == null || binaryPath == null || tracePath == null) {
      throw new IllegalArgumentException("a required argument is null");
    }
    injectDependencies(project, model, binaryPath, tracePath);
    return injector.getInstance(ITRSession.class);
  }

  private void injectDependencies(final Project project, final SModel model, final String binaryPath, final String tracePath) {
    injector = Guice.createInjector(new MapperModule(), new EclipseCdtWrapperModule(), new TracingWrapperModule(), new CDebuggerWrapperModule(), new TestRuntimeModule(), new AbstractModule() {
      protected void configure() {
        bind(Project.class).toInstance(project);
        bind(SModel.class).toInstance(model);
        bind(String.class).annotatedWith(Names.named("binaryPath")).toInstance(binaryPath);
        bind(String.class).annotatedWith(Names.named("tracePath")).toInstance(binaryPath);
      }
    });
  }
}
