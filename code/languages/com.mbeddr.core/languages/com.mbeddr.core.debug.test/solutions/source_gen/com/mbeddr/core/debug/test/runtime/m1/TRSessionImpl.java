package com.mbeddr.core.debug.test.runtime.m1;

/*Generated by MPS */

import com.google.inject.Singleton;
import com.mbeddr.core.debug.debugger.IMSession;
import jetbrains.mps.smodel.SModel;
import com.google.inject.Inject;
import com.google.inject.name.Named;
import com.mbeddr.core.debug.debugger.DebuggerException;

@Singleton
public class TRSessionImpl implements ITRSession {
  private static final int TIMEOUT = 3000;

  private ITRProgramState programStateManager;
  private ITRBreakpointRegistry breakpointManager;
  private ITRStepper stepper;
  private IMSession mSession;
  private boolean attached = false;
  private SModel model;
  private String tracePath;
  private String binaryPath;

  @Inject
  public TRSessionImpl(ITRProgramState programStateManager, ITRBreakpointRegistry breakpointManager, ITRStepper stepperm, IMSession mSession, @Named("binaryPath") String binaryPath, @Named("tracePath") String tracePath, SModel model) {
    this.programStateManager = programStateManager;
    this.breakpointManager = breakpointManager;
    this.stepper = stepperm;
    this.mSession = mSession;
    this.model = model;
    this.tracePath = tracePath;
    this.binaryPath = binaryPath;
  }

  public ITRProgramState getProgramStateAccessor() throws TRSessionNotAttachedException {
    ensureSessionIsAttached();
    return programStateManager;
  }

  public ITRBreakpointRegistry getBreakpointRegistry() throws TRSessionNotAttachedException {
    ensureSessionIsAttached();
    return breakpointManager;
  }

  public ITRStepper getStepper() throws TRSessionNotAttachedException {
    ensureSessionIsAttached();
    return stepper;
  }

  public void attach() throws TRSessionFailedException {
    try {
      mSession.attach(model, binaryPath, tracePath, TIMEOUT);
      attached = true;
    } catch (DebuggerException e) {
      throw new TRSessionFailedException(e.getMessage());
    }
  }

  public void resume() throws TRSessionNotAttachedException, TRExecutingDebugCommandFailedException {
    ensureSessionIsAttached();
    try {
      mSession.resume();
    } catch (DebuggerException e) {
      throw new TRExecutingDebugCommandFailedException(e.getMessage());
    }
  }

  public void detach() throws TRSessionNotAttachedException, TRSessionFailedException {
    ensureSessionIsAttached();
    try {
      mSession.detach();
    } catch (DebuggerException e) {
      throw new TRSessionFailedException(e.getMessage());
    }
  }

  private void ensureSessionIsAttached() throws TRSessionNotAttachedException {
    if (!(attached)) {
      throw new TRSessionNotAttachedException();
    }
  }
}
