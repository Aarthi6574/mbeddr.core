\section{Components}

Let us now introduce components to further structure the system. We start by
factoring the \ic{Trackpoint} data structure into a separate module and export
it to make it accessible from importing modules.


\begin{lstlisting}[language=mbeddr]
module DataStructures imports nothing { 
  exported struct Trackpoint { 
    int8 id; 
    int8/s/ timestamp; 
    int8/m/ x; 
    int8/m/ y; 
    int8/m/ alt; 
    int8/mps/ speed; 
  }; 
}
\end{lstlisting}

\subsection{An Interface with Contracts}

We now define an interface that handles \ic{Trackpoint}s. To be able to do that
we have to add the \ic{com.mbeddr.components} devkit to the current model. We
can then enter a client-server interface in a new module \ic{Components}. We
use pointers for the trackpoints here to optimize performance. Note that you
can just press \ic{*} on the right side of \ic{Trackpoint} to make it a
\ic{Trackpoint*}:

\begin{lstlisting}[language=mbeddr]
module Components imports DataStructures { 
   
  exported cs interface TrackpointProcessor { 
    Trackpoint* process(Trackpoint* p); 
  } 
   
}
\end{lstlisting}

To enhance the semantic "richness" of the interface we can add preconditions. To
do so, use an intention \ic{Add Precondition} on the operation itself. Please
add the following pre- and postconditions (note how you can of course use units
in the precondition):

\begin{lstlisting}[language=mbeddr]
Trackpoint* process(Trackpoint* p) 
  pre(0) p != null 
  pre(1) p->id != 0 
  pre(2) p->timestamp != 0 s 
  post(3) result->id != 0
\end{lstlisting}

After you have added these contracts, you will get an error message on the
interface. The problem is this: if a contract (pre- or postcondition) fails, the
system will report a message (this message can be deactivated in case you don't
want any reporting). However, for the program to work you have to specify a
message on the interface. We create a new message list and a messge:

\begin{lstlisting}[language=mbeddr]
messagelist ContractMessages { 
  ERROR contractFailed() active: contract failed 
}
\end{lstlisting}

You can now open the inspector for the interface and reference this message
from there:

\begin{center} 
  \includegraphics[width=0.5\columnwidth]{figures/tutorial/contractmessage.png}
\end{center}

There are still errors. The first one complains that the message list must be
exported if the interface is exported. We fix it by exporting the message list
(via an intention). The next error complains that the message needs to have to
integer arguments to represent the operation and the pre- or postcondition. We
change it thusly:

\begin{lstlisting}[language=mbeddr]
exported messagelist ContractMessages { 
  ERROR contractFailed(int8 op, int8 pc) active: contract failed
}
\end{lstlisting}


\subsection{A First Component}

Let us create a new component by typing \ic{component}. We call it \ic{Nuller}.
It has one provided port called \ic{processor} that provides the
\ic{TrackpointProcessor} interface:

\begin{lstlisting}[language=mbeddr]
exported component Nuller extends nothing { 
  provides TrackpointProcessor processor 
}
\end{lstlisting}

We get an error that complains that the component needs to implement the
operations defined by the \ic{TrackpointProcessor} interface; we can get those
automatically generated by using a quick fix on the provided port. This gets us
the following:

\begin{lstlisting}[language=mbeddr]
exported component Nuller extends nothing { 
  provides TrackpointProcessor processor 
  Trackpoint* processor_process(Trackpoint* p) <- op processor.process { 
    return null; 
  } 
}
\end{lstlisting}

The \ic{processor\_process} runnable is triggered by an incoming invocation of
the \ic{process} operation defined in the \ic{TrackpointProcessor} interface.
The \ic{Nuller} simply sets the altitute to zero:

\begin{lstlisting}[language=mbeddr]
Trackpoint* processor_process(Trackpoint* p) <- op processor.process { 
  p->alt = 0 m; 
  return p; 
}
\end{lstlisting}

Let us now write a simple test case to check this component. To do that, we
first have to create an instance of \ic{Nuller}. We create an instance
configuration that has an instance of this component. Also, we add an adapter.
An adapter makes a provided port of a component instance
(\ic{Nuller.processor}) available to a regular C program under the specified
name \ic{n}:

\begin{lstlisting}[language=mbeddr]
instances nullerInstances extends nothing { 
  instance Nuller nuller
  adapt n -> nuller.processor 
}
\end{lstlisting}

Now we can write a test case that accesses the \ic{n} adapter --- and through
it, the \ic{processor} port of the \ic{Nuller} component instance \ic{nuller}.
We create a new \ic{Trackpoint}, using 0 as the \ic{id} --- intended to trigger
a contract violation (remember \ic{pre(1) p->id != 0}). To enter the \ic{\&tp}
just enter a \ic{\&}, followed by \ic{tp}:

\begin{lstlisting}[language=mbeddr]
exported test case testNuller { 
  Trackpoint tp = { 
    id = 0 
  }; 
  n.process(&tp); 
}
\end{lstlisting}

Before we can run this, we have to make sure that the \ic{instances} are
initialized (cf. the warning you get on them). We do this right in the test
case:

\begin{lstlisting}[language=mbeddr]
exported test case testNuller { 
  initialize instances; 
  Trackpoint tp = { 
    id = 0 
  }; 
  n.process(&tp); 
}
\end{lstlisting}

To make the system work, you have to import the \ic{Components} module into
the \ic{Main} module so you can call the \ic{testNuller} test case from the
\ic{test} expression in \ic{Main}. In the build configuration, you
have to add the missing modules to the executable (using the quick fix).
Finally, also in the build configuration, you have to add the \ic{components}
configuration item:

\begin{lstlisting}[language=mbeddr-buildconfig, deletekeywords={mbeddr}]
Configuration Items:
  reporting: printf (add labels false) 
  physical units (config = Units Declarations (mbeddr.tutorial.main.m1)) 
  components: no middleware         
              wire statically: false
\end{lstlisting}

You can now rebuild and run. As a result, you'll get contract failures:

\begin{lstlisting}
./MbeddrTutorial
$$runningTest: running test () @FunctionPointers:test_testProcessing:0#767515563077315487
$$runningTest: running test () @Components:test_testNuller:0#767515563077315487
$$contractFailed: contract failed (op=0, pc=1) @Components:null:-1#1731059994647588232
$$contractFailed: contract failed (op=0, pc=2) @Components:null:-1#1731059994647588253
\end{lstlisting}

We can fix these problems by changing the test data to conform to the contract:

\begin{lstlisting}[language=mbeddr]
Trackpoint tp = { 
  id = 10 
  timestamp = 10 s 
  alt = 100 m 
}; 
n.process(&tp); 
assert(0) tp.alt == 0 m;
\end{lstlisting}

Let us provoke another contract violation by returning from the implementation
in the \ic{Nuller} component a \ic{Trackpoint} whose \ic{id} is 0:

\begin{lstlisting}[language=mbeddr]
Trackpoint* processor_process(Trackpoint* p) <- op processor.process { 
  p->alt = 0 m; 
  p->id = 0; 
  return p; 
}
\end{lstlisting}

Running it again provokes another contract failure. Notice how the contract is
specified on the \emph{interface}, but they are checked for each
\emph{component} implementing the interface. There is no way how an
implementation can violate the interface contract without the respective error
being reported!

\subsection{Collaborating and Stateful Components}

Let us look at interactions between components. We create a new interface, the
\ic{TrackpointStore}. It can store and return trackpoints\footnote{Sure, it is
completely overdone to separate this out into a separate interface/component, but for the sake of the tutorial it
makes sense.}. Here is the basic interface: 

\begin{lstlisting}[language=mbeddr]
exported cs interface TrackpointStore1 { 
  void store(Trackpoint* tp) 
  Trackpoint* get() 
  Trackpoint* take() 
  boolean isEmpty() 
}
\end{lstlisting}

Let us again think about the semantics: you shouldn't be able to get or take
stuff from the store if it is empty, you should not put stuff into it when it is
full, etc. These things can be expressed as pre- and postconditions. The
following should be pretty self-explaining. The only new thing is the \ic{query}
operation. Queries can be used from inside pre- and postconditions, but cannot
modify state\footnote{Currently this is not yet checked. But it will be.}

\begin{lstlisting}[language=mbeddr]
exported cs interface TrackpointStore1 { 
  void store(Trackpoint* tp) 
    pre(0) isEmpty() 
    pre(1) tp != null 
    post(2) !isEmpty() 
  Trackpoint* get() 
    pre(0) !isEmpty() 
  Trackpoint* take() 
    pre(0) !isEmpty() 
    post(1) result != null 
    post(2) isEmpty() 
  query boolean isEmpty() 
}
\end{lstlisting}

These pre- and postconditions mostly express a valid sequence of the operation
calls: you have to call \ic{store} before you can call \ic{get}, etc. This can
be expressed directly with protocols:

\begin{lstlisting}[language=mbeddr]
exported cs interface TrackpointStore2 {
 
  // store goes from the initial state to a new state full
  void store(Trackpoint* tp) 
    protocol init(0) -> new full(1) 

  // get expects the state to be full, and remains there
  Trackpoint* get() 
    protocol full -> full 

  // take expects to be full and then becomes empty (i.e. init)
  Trackpoint* take() 
    post(0) result != null 
    protocol full -> init(0) 

  // and isEmpty has no effect on the protocol state
  query boolean isEmpty() 
}
\end{lstlisting}

The two interfaces are essentially equivalent, and both are checked at runtime
and lead to errors if the contract is violated.

We can now implement a component that provides this interface. Most of the
following code should be easy to understand based on what we have discussed so
far. There are two new things. There is a field \ic{Trackpoint*
storedTP;} that represents component state. Second there is an \ic{on-init}
runnable: this is essentially a constructor that is executed as an instance is
created.

\begin{lstlisting}[language=mbeddr]
exported component InMemoryStorage extends nothing { 
  provides TrackpointStore1 store 
  Trackpoint* storedTP; 
  
  void init() <- on init { 
    storedTP = null; 
  }

  void trackpointStore_store(Trackpoint* tp) <- op store.store { 
    storedTP = tp; 
  } 
  Trackpoint* trackpointStore_get() <- op store.get { 
    return storedTP; 
  } 
  Trackpoint* trackpointStore_take() <- op store.take { 
    Trackpoint* temp = storedTP; 
    storedTP = null; 
    return temp; 
  } 
  boolean trackpointStore_isEmpty() <- op store.isEmpty { 
    return storedTP == null; 
  } 
}
\end{lstlisting}

To keep our implementation module \ic{Components} well structured we can use
sectios. A \ic{section} is a named part of the implementation module that has no
semantic effect beyond that. Sections can be collapsed.

\begin{lstlisting}[language=mbeddr]
module Components imports DataStructures { 
   
  exported messagelist ContractMessages {...}
   
  section processor {...} 
 
  section store { 
  	exported cs interface TrackpointStore1 { 
    	... 
  	} 
  	exported cs interface TrackpointStore2 { 
    	... 
  	} 
    exported component InMemoryStorage extends nothing { 
	    ... 	
  	} 
  }
    
  instances nullerInstances {...} 
  test case testNuller {...} 
  instances interpolatorInstances {...} 
  exported test case testInterpolator { ... } 
}
\end{lstlisting}

We can now implement a second processor. For subsequent calls of \ic{process},
it computes the average of the two last speeds of the passed trackpoints. Let us
start with the test case. Note how \ic{p2} has its speed changed to the average
of the \ic{p1} and \ic{p2} originally.

\begin{lstlisting}[language=mbeddr]
exported test case testInterpolator { 
  initialize interpolatorInstances; 
  Trackpoint p1 = {
    id = 1 
    timestamp = 1 s 
    speed = 10 mps 
  }; 
  Trackpoint p2 = { 
    id = 1 
    timestamp = 1 s 
    speed = 20 mps 
  }; 
  
  ip.process(&p1); 
  assert(0) p1.speed == 10 mps; 

  ip.process(&p2); 
  assert(1) p2.speed == 15 mps; 
}
\end{lstlisting}

Let us look at the implementation of the \ic{Interpolator}. Here it is.

\begin{lstlisting}[language=mbeddr]
exported component Interpolator extends nothing { 
  provides TrackpointProcessor processor 
  requires TrackpointStore1 store 
  init int8 divident; 
  Trackpoint* processor_process(Trackpoint* p) <- op processor.process { 
    if (store.isEmpty()) { 
      store.store(p); 
      return p; 
    } else { 
      Trackpoint* old = store.take(); 
      p->speed = (p->speed + old->speed) / divident; 
      store.store(p); 
      return p; 
    } 
  }  
}
\end{lstlisting}

A few things are worth mentioning. First, the component \ic{requires} another
one. More specifically it only expresses a requirement towards an interface,
\ic{TrackpointStore1} in our case. Any component that implements this interface
can be used to fulfil this requirement (we'll discuss how below). Second, we use
an \ic{init} field. This is a regular field from the perspective of the
component (i.e. it can be accessed from within the implementation), but it is
special in that a value for it has to be supplied when the component is
instantiated. Third, this example shows how to call operations on required
interfaces (\ic{store.store(p);}).

The only remaining step before running the test is to define the instances. Here
is the code:

\begin{lstlisting}[language=mbeddr]
instances interpolatorInstances extends nothing { 
  instance InMemoryStorage store 
  instance Interpolator ip(divident = 2) 
  connect ip.store to store.store 
  adapt ip -> ip.processor 
}
\end{lstlisting}

Two interesting things. First, notice how we pass in a value for the init field
\ic{divident} as we define an instance of \ic{Interpolator}. Second, we use
\ic{connect} to connect the required port \ic{store} of the \ic{ip} instance to
the \ic{store} provided port of the \ic{store} instance. If you don't do this
you will get an error on the \ic{ip} instance since it \emph{requires} this
thing to be connected (there are also \ic{optional} required ports which may
remain unconnected). 

You can run the test case now. On my machine here it works successfully :-)




\subsection{Mocks}

Let us assume we wanted to test if the \ic{Interpolator} works correctly with
the \ic{TrackpointStore} interface. Of course, since we have already described
the interface contract semantically we would find out quickly if the
\ic{Interpolator} would behave badly. However, we can make such a test more
explicit. Let us revisit the test from above:

\begin{lstlisting}[language=mbeddr]
exported test case testInterpolator { 
  initialize interpolatorInstances; 
  Trackpoint p1 = {...}; 
  Trackpoint p2 = {...}; 
  
  ip.process(&p1); 
  assert(0) p1.speed == 10 mps; 

  ip.process(&p2); 
  assert(1) p2.speed == 15 mps; 
}
\end{lstlisting}

In this test, we expect the following: when we call \ic{process} first, the store is
still empty, so the interpolator stores a new trackpoint. When we call
\ic{process} again, we expect the interpolator to call \ic{take} and then
\ic{store}. In both cases we expect \ic{isEmpty} to be called first. We can test
for this behavior explicitly via a mock. A mock is a component that specifies
the behavior it expects to see on a provided port during a specific test case.

The crucial point about mocks is that a mock implements each operation
\emph{invocation} separately (the \ic{step}s below), whereas a regular component
or even a stub just describe each operation with \emph{one} implementation. This
makes a mock implementation much simpler --- it doesn't have to replicate the
algorithmic implementation of the real component. Let us look at the
implementation:

\begin{lstlisting}[language=mbeddr]
mock component StorageMock report messages: true { 
  provides TrackpointStore1 store 
  Trackpoint* lastTP; 
  total no. of calls is 5 
  sequence { 
    step 0: store.isEmpty return true; 
    step 1: store.store { 
        assert 0: parameter tp: tp != null 
      } 
      do { lastTP = tp; } 
    step 2: store.isEmpty return false; 
    step 3: store.take return lastTP; 
    step 4: store.store 
  } 
}
\end{lstlisting}

This mock component expresses that we expect 5 calls in total. Then we describe
the sequence of calls we expect. The first one must be a call to \ic{isEmpty}
and we return \ic{true}. Then we expect a \ic{store}, and for the sake of the
example, we check that \ic{tp} is not \ic{null}. We also store the \ic{tp}
parameter in a field \ic{lastTP} so we can return it later (you can add the
parameter assertions and the \ic{do} body with intentions). We then expect another
\ic{isEmpty} query, which we now answer with \ic{false}. At this point we expect
a call to \ic{take}, and another call to \ic{store}. Notice how we return
\ic{null} from \ic{take}: this violates the postcondition! However, pre- and
postconditions are \emph{not} checked in mock components because their checking
may interfere with the expectations! Also, we have slightly changed the test
case so we don't stumble over the \ic{null}. We don't \ic{assert} anything about
the result of the \ic{process} calls:

\begin{lstlisting}[language=mbeddr]
ipMock.process(&p1); 
ipMock.process(&p2); 
\end{lstlisting}

Two more steps are required for this thing to work. The first one is the
instances and the wiring. Notice how we now connect the interpolator with the
mock:

\begin{lstlisting}[language=mbeddr]
instances interpolatorInstancesWithMock extends nothing { 
  instance StorageMock storeMock 
  instance Interpolator ip(divident = 2) 
  connect ip.store to storeMock.store 
  adapt ipMock -> ip.processor 
}
\end{lstlisting}

The second thing is the test case itself. Obviously, we want the test case to
fail if the mock saw something other than what it expects on its port.
We can achieve this by using the \ic{validate mock} statement in the test. Here
is the complete test case (notice the \ic{validate mock} in the last line):

\begin{lstlisting}[language=mbeddr]
exported test case testInterpolatorWithMock { 
  initialize interpolatorInstancesWithMock; 
  Trackpoint p1 = { 
    id = 1 
    timestamp = 1 s 
    speed = 10 mps 
  }; 
  Trackpoint p2 = { 
    id = 1 
    timestamp = 1 s 
    speed = 20 mps 
  }; 
  ipMock.process(&p1); 
  ipMock.process(&p2); 
  validatemock (0) interpolatorInstancesWithMock:storeMock; 
}
\end{lstlisting}













































