\section{Accessing Libraries}

So far we have not accessed any functions external to the mbeddr program ---
everything was self-contained. Let us now look at how to access external code.
We start with the simplest possible example. We would like to be able to write
the following code:

\begin{lstlisting}[language=mbeddr]
module LibraryAccess imports nothing { 
  exported test case testPrintf { 
	printf("Hello, World\n"); 
    int8 i = 10; 
    printf("i = %i\n", i);  } 
  }
\end{lstlisting}

To make this feasible, we have to integrate C's standard \ic{printf} function.
We could import all of \ic{stdio} automatically (we'll do that below).
Alternatively, if you only need a few API functions from some library, it is
simpler to just write the necessary proxies manually. Let's use the second
approach first. 

External functions are represented in a so-called \ic{external module}. After
you create one and give it a name, it looks like this:

\begin{lstlisting}[language=mbeddr]
// external module contents are exported by default 
external module stdio_stub imports nothing resources nothing { 
}
\end{lstlisting}

An external module is always associated with one or more "real" header files.
The trick is that when an implementation module imports an external module in
mbeddr, upon generation of the C code, the referenced real header is included
into the C file. So the first thing we need to do is to express that this
\ic{stdio\_stub} external module represents the \ic{stdio.h} file:

\begin{lstlisting}[language=mbeddr]
// external module contents are exported by default 
external module stdio_stub imports nothing resources header <stdio.h> { 
}
\end{lstlisting}

In general, we also have to specify the \ic{.o} or \ic{.a} files that have to be
linked to the binary during the \ic{make} process (in the \ic{resources} section
of the external module). In case of \ic{stdio.h}, we don't have to specify this
--- gcc somehow does this automatically.

So what remains to do is to write the actual \ic{printf} prototype. This is a
regular function signature. The ellipsis can be added via an intention. The
same is true for the \ic{const} modifier. This leads us to this:

\begin{lstlisting}[language=mbeddr]
// external module contents are exported by default 
external module stdio_stub imports nothing resources header: <stdio.h> { 
  void printf(const char* format, ...); 
}
\end{lstlisting}

To be able write the test case, we have to import the \ic{stdio\_stub} into our
\ic{LibraryAccess} implementation module. And in the build configuration we
have to add the \ic{LibraryAccess} and the \ic{stdio\_stub} to the binary. We
should also call the \ic{testPrintf} test case from \ic{Main}.































