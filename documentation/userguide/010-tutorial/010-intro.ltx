\part{Tutorials}

\chapter{Installation and Setup}

However, this section describes the installation of mbeddr in detail, including
Java and MPS itself. 

\greyboxnote{We are working on a all-in-one distribution that includes MPS and
mbeddr. Stay tuned.}

\section{Java} 

MPS is a Java application. So as the first step, you have to install a Java
Development Kit version 1.6 or greater (JDK 1.6). You can get it from here \\
\hspace*{5mm}\ic{http://www.oracle.com/technetwork/java/javase/downloads/index.html}

\section{JetBrains Meta Programming System (MPS)} 

The mbeddr system is based on JetBrains MPS, an open source language workbench
available from \ic{http://www.jetbrains.com/mps/}. MPS is available for Windows,
Mac and Linux, and we require the use of the 2.5.x version. Please make sure you
install MPS in a path that does not contains blanks in any of its directory or
file names (not even in the \ic{MPS 2.5} folder). This will simplify some of the
command line work you may want to do.

After installing MPS using the platform-specific installer, please open the
\ic{bin} folder and edit the \ic{mps.vmoptions}  or \ic{mps.exe.vmoptions} file
(depending on your platform). To make MPS run smoothly, the \ic{MaxPermSize}
setting should be increased to at least \ic{512m}. It should look like this
after the change:

\begin{lstlisting}
-client
-Xss1024k  
-ea
-Xmx1200m
-XX:MaxPermSize=512m
-XX:+HeapDumpOnOutOfMemoryError
-Dfile.encoding=UTF-8
\end{lstlisting}

On some 32bit Windows XP systems we had to reduce the \ic{-Xmx1200m} setting to
\ic{768m} to get it to work.



\section{GCC and make}

The mbeddr toolkit relies on \ic{gcc} and \ic{make} for compilation (unless you
use a different, target-specific build process). 

\begin{itemize}
  \item On Mac you should install XCode to get \ic{gcc}, \ic{gdb}, \ic{make} and the
  associated tools.
  \item On Linux, these tools should be installed by default.
  \item On Windows we recommend installing cygwin
     (\ic{http://www.cygwin.com/}), a Unix-like environment for Windows. When
selecting the packages to be installed, make sure \ic{gcc-core}, \ic{gdb} and
\ic{make} are included (both of them are in the \ic{Devel} subtree in the selection
dialog). The \ic{bin} directory of your cygwin installation has to be added to the system
\ic{PATH} variable; either globally, or in the script that starts up MPS (MPS
runs \ic{make}, so it has to be visible to MPS). On Windows, the \ic{mps.bat}
file in the MPS installation folder would have to be adapted like this:
\end{itemize}
 
\begin{lstlisting}
::rem mbeddr depends on Cygwin: gcc, make etc
::rem adapt the following to your cygwin bin path
set PATH=C:\ide\Cygwin\bin;%PATH%
\end{lstlisting}

\section{Graphviz}

MPS supports visualization of models via PlantUML
(\ic{http://plantuml.sourceforge.net}), directly embedded in MPS.
To use it, you have to install graphviz from \ic{http://graphviz.org}. We use
version 2.30. After the installation, you have to put the \ic{bin} directory of
graphviz into the path. Either globally, or by modifying the MPS startup script
in the same way as above:

\begin{lstlisting}
::rem mbeddr depends on graphviz dot
::rem adapt the following to your graphviz bin path
set PATH=C:\ide\graphviz2.28\bin;%PATH%
\end{lstlisting}


\section{mbeddr}

You can get the mbeddr code either via distributions or via the public github
repository.

\parhead{Installing the Distribution} We recommend installing the distribution,
because this is a much simpler process than working from the github sources. The
distribution can be downloaded from the \ic{mbeddr.com} website:

\vspace{-3mm}
\hspace{10mm} \ic{http://mbeddr.wordpress.com/getit/}
\vspace{-3mm}

The ZIP file you can get there contains this user guide, an early version of the
extension guide as well as a set of plugins for MPS. Please take all the folders
inside the \ic{plugins} directory in the ZIP file and copy them into the
\ic{plugins} directory under MPS\footnote{Note that there is also a
\ic{plugin} (without the \ic{s}) directory under MPS!}. So, for example, after
copying, there should be a \ic{\$MPS\_DIR\$/plugins/mbeddr.core} directory.

\parhead{Installing From github} The github repo ist a
\ic{https://github.com/mbeddr/mbeddr.core}. Here are the steps to get
things running:

\begin{itemize}
  \item Clone the repository onto your local machine.
  \item Rebuild all the languages. We provide a shell script for this purpose 
  (\ic{.bat} and \ic{.sh}) called \ic{rebuildLanguagesAfterCheckout}. 
  It is in the \ic{code/languages} directory. For this to work, you have to
  configure all \ic{build.properties} files to point to your MPS install dir and
  the mbeddr root dir (\textbf{You have to use forward shlashes as directory
  separators even on Windows!}). The easiest way to find all the places where this has to be adapted is to search for all \ic{build.properties.example} under the mbeddr
  root mbeddr directory; remove the \ic{.example} and fill in the respective
  directories. 

  \item We now have to make the project aware of the \ic{mbeddr.core} languages
  in the github checkout. Go to the $File \rightarrow Settings$ (on the
  Mac it is under $MPS \rightarrow Preferences$) and select the $Global
  Libraries$ in the IDE settings. Create a library called \ic{mbeddr.core} that
  points to the \ic{code} directory of the unzipped mbeddr
  installation. The library must point to the \ic{code}
  directory of the checkout so that all languages are below it, 
  including \emph{core} and \emph{mpsutil}.

\begin{center} 
  \includegraphics[width=10cm]{figures/core/SettingsGlobalLibraries.png}
\end{center}

Notice that this is a global settings and have to be performed only once
before your first application project.

  \item The mbeddr debugger is based on \ic{gdb}, which has been installed as
  part of the Cygwin install. However, we don't use \ic{gdb} directly; rather
  we use the Eclipse CDT debug bridge. This contains native code, and Java has to be able to
  find this native code. The Eclipse code is packaged into a special MPS plugin
  which you have to install into MPS. To do so, please move (not just copy!) the
  \ic{spawner} folder from the \ic{tools} directory of mbeddr into the
  \ic{plugins} directory of MPS (again, make sure it ends up the \ic{plugins}
  directory, not in \ic{plugin}).
  
\end{itemize}

You are now ready to build your first project with mbeddr.
 




\chapter{Writing Code in MPS}

You can now start writing mbeddr code. \sect{helloworld} contains a tutorial
that shows how to write the simplest possible program, the ubiquitous Hello,
World. We suggest to take a look at this section.


MPS is a projectional editor. It does not parse text and build an Abstract
Syntax Tree (AST). Instead the AST is created directly by user editing actions,
and what you see in terms of text (or other notations) is a projection. This has
many advantages, but it also means that some of the well-known editing gestures
we know from normal text editing don't work. So in this section we explain some
keyboard shortcuts that are essential to work with MPS.

Since the very first experience a projectional editor is somewhat
different from what you are accustomed to in a text editor, we recommend
you watch the following screencast:\\
\hspace*{10mm} \ic{http://www.youtube.com/watch?v=wgsY3-ZX\_fs}  


\parhead{Entering Code} In MPS you can only enter code that is
available from the code completion menu. Using aliases and other "tricks", MPS
manages to make this feel \emph{almost} like text editing. Here are some hints
though:

\begin{itemize}
  \item As you start typing, the text you're entering remains red, with a light
  red background. This means the string you've entered has not yet \emph{bound}. 
  \item Entered text will bind if there is only one thing left in the code
  completion menu that starts with the substring you've typed so far. An
  instance of the selected concept will be created and the red goes away.
  \item As long as text is still red, you can press \keystroke{Ctrl-Space} to
  explicitly open the code completion menu, and you can select from those
  concepts that start with the substring you have typed in so far.
  \item If you want to go back and enter something different from what the
  entered text already preselects, press \keystroke{Ctrl-Space} again. This will
  show the whole code completion menu.
  \item Finally, if you're trying to enter something that does not bind at all
  because the prefix you've typed does not match anything in the code
  completion menu, there is no point in continuing to type; it won't ever bind.
  You're probably trying to enter something that is not valid in this place.
  Maybe you haven't included the language module that provides the concept
  you have in mind?
  \item Some language features may only be accessible via an intention. If you
  don't know how to go on, press \keystroke{Alt-Enter} and see if the intentions
  window has something useful to offer.
\end{itemize}


\parhead{Entering Expressions} Expressions can be entered linearly. So if you
have a number literal \ic{42} and you want to change that expression to \ic{42
+ 2} you can simply move to the right side of the \ic{42} and type \ic{+} and
then \ic{2}. However, if you want to add something on the left side of an
expression (e.g. changing \ic{42} to \ic{10 + 42}) then you have to move to the
\emph{left} side of the \ic{42} and enter \ic{+} as well; you can then enter
\ic{10}. 
 



\parhead{Navigation} Navigation in the source works as usual using the cursor
keys or the mouse. References can be followed ("go to definition") either by
\keystroke{Ctrl-Click} or by using \keystroke{Ctrl-B}. The reverse is also
supported. The context menu on a program element supports Find Useages. This can
also be activated via \keystroke{Alt-F7}.

Within an mbeddr program, you can also press \keystroke{Ctrl-F12} to get an
outline view that lists all top level or important elements in that particular
program so you can navigate to it easily.


\parhead{Selection} Selection is different. \keystroke{Ctrl-Up/Down} can be
used to select along the tree. For example consider a local variable declaration
\ic{int x = 2 + 3 * 4;} with the cursor at the \ic{3}. If you now press
\keystroke{Ctrl-Up}, the \ic{3 * 4} will be selected because the \ic{*} is the
parent of the \ic{3}. Pressing \keystroke{Ctrl-Up} again selects \ic{2 + 3 * 4},
and the next \keystroke{Ctrl-Up} selects the whole local variable declaration.

You can also select with \keystroke{Shift-Up/Down}. This selects siblings in a
list. For example, consider a statement list as in a function body ...

\begin{lstlisting}[language=mbeddr]
void aFunction() {
  int x;
  int y;
  int z;
}
\end{lstlisting}

... and imagine the cursor in the \ic{x}. You can press \keystroke{Ctrl-Up} once
to select the whole \ic{int x;} and then you can use \keystroke{Shift-Down} to
select the \ic{y} and \ic{z} siblings. Note that the screencast mentioned above
illustrates these things much clearer.

\parhead{Deleting Things} The safest way to delete something is to mark it
(using the strategies discussed in the previous paragraph) and the press
\keystroke{Backspace} or \keystroke{Delete}. In many places you can also simply
press \keystroke{Backspace} behind or \keystroke{Delete} before the thing you
want to delete.


\parhead{Intentions} Some editing functionalities are not available via
"regular typing", but have to be performed via what's traditionally known as a
quick fix. In MPS, those are called intentions. The intentions menu can be shown
by pressing \keystroke{Alt-Enter} while the cursor is on the program element for
which the intention menu should be shown (each language concept element has its
own set of intentions). For example, module contents in mbeddr can only be set
to be \ic{exported} by selecting \emph{export} from the intentions menu. Explore
the contents of the intentions menu from time to time to see what's possible.

Note that you can just type the name of an intention once the menu is open, you
don't have to use the cursor keys to select from the list. So, for example, to
export a module content (function, struct), you type 
\keystroke{Alt-Enter}, \keystroke{ex}, \keystroke{Enter}. 

\parhead{Surround-With Intentions} Surround-With intentions are used to
surround a selection with another construct. For example, if you select a couple
of lines (i.e. a list of statements) in a C program, you can then surround these
statements with an \ic{if} or with a \ic{while}. Press \keystroke{Ctrl-Alt-T}
to show the possible surround options at any time. To reemphasize: in contrast
to regular intentions which are opened by \keystroke{Alt-Enter}, surround-with
intentions can work on a selection that contains several nodes!

\parhead{Refactorings} For many language constructs, refactorings are
provided. Refactorings are more important in MPS than in "normal" text editors,
because some (actually quite few) editing operations are hard to do manually.
Please explore the refactorings context menu, and take note when we explain
refactorings in the user's guide. Unlike intentions, which cannot have a
specific keyboard shortcut assigned, refactorings can, and we make use of this
feature heavily. The next section introduces some of these.

\parhead{Select in Project} To select the currently edit root note in the
project explorer (the big tree of the left), press \keystroke{Alt-F1} and then
\keystroke{Enter}.

\parhead{Make and Rebuild} By default, \keystroke{Ctrl-F9} (and
\keystroke{Cmd-F9} on the Mac) makes the current module, i.e. it regenerates and
recompiles if the current module has changed. We recommend using the Keymap
preferences to assign \keystroke{Ctrl-Alt-F9} (and \keystroke{Cmd-Alt-F9} on
the Mac) to a complete Rebuild of the current module; sometimes changes aren't
detected correctly and a full rebuild is necessary.


\greyboxnote{Since MPS 2.5, MPS comes with a productivity guide and actually
useful hints and tips at startup. The productivity guide tracks the commands you
use and recommends more productive ones. Find it in the \ic{Help} menu.}

   
   
