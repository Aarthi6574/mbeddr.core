\section{Data Flow Blocks}

\greyboxnote{The code for this tutorial is in the \ic{com.mbeddr.blocks}
language. Please open the project and click around in the language as you read
this tutorial, since not every detail of the implementation is explained here.}


\subsection{An Example}

Imagine a language for dataflow programming as shown in the image below.
Defining such systems consists of two steps. The first one is the definition of
the blocks -- ports, data types and the logic inside them. The second aspect is
the wiring of block instances to create a complete system.

\begin{center} 
  \includegraphics[width=60mm]{figures/tutorial/graphicalFlow.png}
\end{center}

The first aspect can be done textually very well and will be discussed in
this tutorial (the second aspect is something for the later time when MPS will
support graphical notations). Here is an example program that defines the \ic{+}
block. This block has \ic{in} ports, \ic{out} ports as well as the logic
dependent on its state (it can be turned on or off):

\begin{center} 
  \includegraphics[scale=0.5]{figures/tutorial/adderBlock.png}
\end{center}

Below is a more interesting block that integrates an input \ic{signal}. It has a
configuration property \ic{avgOver} that determines how many values the
integrator should integrate over. It also has internal data structures to manage
the rolling buffer necessary for the integration. Finally, the example shows how
a block can call out to a C function:

\begin{center} 
  \includegraphics[scale=0.5]{figures/tutorial/integratorBlock.png}
\end{center}


\subsection{The Outer Structure of Blocks}

In this subsection we discuss the outer structure of blocks (i.e. the blocks
themselves, ports, properties, variables and states). The necessary extensions
to write the application logic are discussed in the next subsection.

\parhead{Structure} Let us look at the structure of the implementation of
blocks. A \ic{Block} implements the \ic{IModuleContent} interface so it can be
used inside of modules. It also owns a collection of
\ic{IBlockInterfaceElement}s (the super type of \ic{Port}s and
\ic{Property}s), a collection of \ic{Variable}s as well as a collection of
\ic{BlockState}s. It has an alias \ic{block} so the it can be instantiated
easily.

\begin{lstlisting}[language=mps]
concept Block extends BaseConcept                           
              implements IModuleContent                     
                                                            
  children:                                                 
    IBlockInterfaceElement interfaces   0..n specializes: <none>
    Variable               variables    0..n specializes: <none>               
    BlockState             states       0..n specializes: <none>                
                                                            
  concept properties:                                       
    alias = block                                             
\end{lstlisting}                                                            
                                                            

A \ic{Port} implements \ic{IBlockInterfaceElement}, which in turn extends
\ic{IIdentifierNamed- Concept} so ports have a name. A port also implements
\ic{ITyped}, an interface defined by the \ic{core.expressions} language that
adds a \ic{type} property to the element (rememeber from the example above that
a port has a type such as \ic{int8}). A port also has a direction property which
is represented as an \ic{enum}:

\begin{lstlisting}[language=mps, morekeywords={enumeration, datatype, member,
type, no, default, identifier, derive, from, value}, deletekeywords={in}] 
enumeration datatype PortDirection
                                              
  member type : integer                       
  no default : false                          
  default : in                                
  member identifier : derive from presentation
                                              
  value 0   presentation in     (default)     
  value 1   presentation out                  
\end{lstlisting}                                                            

The second kind of block interface, the \ic{Property}, looks essentially similar
to a \ic{Port} -- it just doesn't have a direction property. The same is true
for the \ic{Variable}, even though it is not part of the block interface (only
of its implementation).

The implementation also consists of several \ic{BlockState}s. A \ic{BlockState}
also has a name (by implementing \ic{IIdentifierNamedConcept}) as well as a
\ic{BlockStateImpl}. While this has been not shown in the examples above, a
state, instead of implementing its own behavior, can express that its behavior
is the same as that of another state (\ic{state Standby = On}).
\ic{BlockStateImpl} is abstract and has two subconcepts:
\ic{CalcMethodBSI} and \ic{SameAsOtherStateBSI}.
\ic{CalcMethodBSI} contains a \ic{StatementList} to contain actual application
logic. \ic{SameAsOtherStateBSI} has  reference to another \ic{BlockState}:

\begin{lstlisting}[language=mps]
concept CalcMethodBSI extends BlockStateImpl
  children:                                 
    StatementList body 1  
                                            
  concept properties:                       
    alias = {                                 
\end{lstlisting}                                            


\begin{lstlisting}[language=mps]
concept SameAsOtherStateBSI extends BlockStateImpl
                                                  
  references:                                     
    BlockState state 1          
                                                  
  concept properties:                             
    alias = =                                       
\end{lstlisting}

\parhead{Editor} The editors for ports, properties and variables are all
essentially the same: an indent collection of a keyword, the type and the name,
plus the direction in case of the \ic{Port}. Here is the editor for the port:


\begin{center} 
  \includegraphics[scale=0.6]{figures/tutorial/portEditor.png}
\end{center}

For the state implementation the editor is either just the body (\ic{\%body\%})
or the reference to the other state (\ic{[- = (\%state\%->{name}) -]}). That
other state is represented by its name. The only really interesting editor is
the one for the \ic{Block} itself. Here is the code:

\begin{center} 
  \includegraphics[scale=0.6]{figures/tutorial/blockEditor.png}
\end{center}

On its outermost level, it consists of an indent collection (\ic{[- .. -]}). It
contains the keyword, the name, and then a vertical collection (\ic{[/ ..
/]}) which in turn contains a vertical child collection for the interfaces
(ports and properties) and variables. These child collections have their
\ic{draw-brackets} style set to true (this renders the brackets around the
collection, see examples above). On the right of the vertical collection we have
an opening brace, the collection of states and a closing brace. Notice that the
states are projected as an indent collection even though in the example we see
that they are projected below each other. This is achieved by setting three
style attributes on the indent collection cell:

\begin{lstlisting}
indent-layout-on-new-line : true      
indent-layout-new-line-children : true
indent-layout-indent : true           
\end{lstlisting}

\parhead{Type System} The variables, ports and properties must have
unique names for each block. While this constraint could be implemented
manually, there is direct support available in mbeddr. The \ic{Block} implements
the \ic{IContainerOfUniqueNames} interface. This interface requires the
implementation of a behavior method \ic{getUniquelyNamedEle- ments} that returns
the colleciton of elements whose contents must be named uniquely. The check for
uniqueness is then performed automatically in this collection. Here is the
implementation for the \ic{Block}:


\begin{lstlisting}[language=mps]
public sequence<node<INamedConcept>> getUniquelyNamedElements() 
      overrides IContainerOfUniqueNames.getUniquelyNamedElements { 
  nlist<INamedConcept> res = new nlist<INamedConcept>; 
  res.addAll(this.interfaces); 
  res.addAll(this.variables); 
  res; 
}
\end{lstlisting}
                                                                                                                                                                                                                                                                 
We do not have to write typing rules for variables, ports and properties since
their is already a typesystem rule for the interface \ic{ITyped}:

\begin{lstlisting}[language=mps]
rule typeof_ITyped {                   
  applicable for concept = ITyped as it
  overrides false                      
                                       
  do {                                 
    typeof(it) :==: typeof(it.type);   
  }                                    
}                                      
\end{lstlisting}


\parhead{Generator} From a block, we generate the following artifacts:

\begin{itemize}
  \item a \ic{struct} representing the collection of input ports
  \vspace{-5mm}
  \item a \ic{struct} representing the collection of output ports
  \vspace{-5mm}
  \item a \ic{struct} representing the data held by a block instance (i.e.
  properties and variables) 
  \vspace{-5mm}
  \item an \ic{enum} representing the states
  \vspace{-5mm}
  \item and a function that contains the block behavior.
\end{itemize}

All of these artifacts must replace the original block, so we can use a
reduction rule. To organize the resulting code nicely we use a \ic{section} that
contains all these things. So here is the generator code, we'll explain it
below.

\begin{center} 
  \includegraphics[width=\columnwidth]{figures/tutorial/blockGenerator.png}
\end{center} 

We start out with a reduction rule (since we want to replace the block with the
result of the transformation). On the right side we use an \ic{inline tempalte
with context}. The context is the \ic{Dummy} module; inside it we have the
section which we mark as the template fragment (\ic{<TF .. TF>}), so only that
section replaces the block when the transformation executes. 

The name property of the section uses a property macro to change the
template name of the section (\ic{blockSection}) to the name of the block from
which this section is generated (using \ic{node.name} as the expression in the
macro). Inside the section we generate the contents discussed above.

The \ic{enum} uses a property macro to change its name to a name that is derived
from the block name. We call a behavior on the block that creates that name
(\ic{node.stateEnumName()}). Inside the enum we create a literal for each state
by simply \ic{LOOP}ing over the states of the input block.

The struct for the input data also uses a property macro to create a suitably
unique name. Inside the struct we loop over all the \ic{in} ports using an
expression that calls into another behavior method:

\begin{lstlisting}[language=mps]
public sequence<node<Port>> inports() { 
  this.ports().where({~it => it.dir.is(<in>); }); 
}
\end{lstlisting}
                                                                                               
The member in the struct needs to be templatized as well: a property macro
changes the name, and the we also use a \ic{COPY\_SRC} macro to replace the
dummy type \ic{int8} with a copy of the type specified for the particular port
in the input model. We use the same approach for the \ic{out} ports. 

The struct that represents the data of a block instance contains a member typed
to the states \ic{enum} generated before. Note how we do \emph{not} need any
kind of macro to make this work, we simply refer to the \ic{states} enum -- the
reference is automatically resovled correctly because we are under the same
parent (the section) as the enum when it is generated. We then generate members
for the properties and variables using the same appraoch as for the ports
discussed above.

We can now look at the generation of the function that implements the port
behavior. Obviously we use a property macro to adapt the function's name to the
input block. Then we define a signature that takes the three generated structs
as arguments. Once again we don't have to do anything about them in terms of
macros, since the references are resolved correctly automatically. Inside the
function we \ic{switch} over the various states and we add a case for each state
that has an actual calculation associated with it. Here is the code for the
\ic{LOOP} macro:

\begin{lstlisting}[language=mps]
node.states.where({~it => it.impl.isInstanceOf(CalcMethodBSI); });
\end{lstlisting}

Now, in the \ic{case} statement we have to refer to the enum literal that represents
the state addressed in that particular \ic{case}. We do so by attaching a
reference macro to the reference to the enum literal -- this macro "bends" the
reference target to the enum literal that corresponds to the current state. To
do so, the macro simply returns the name of that literal (\ic{node.name}). That
name is resolved and bound to the actual literal lazily. 

Inside the \ic{case} statement we have a dummy statement (\ic{int8 x;}) and a
\ic{break}. We replace the dummy statement with a list of all the statements in
the body of the \ic{CalcMethodBSI} using a \ic{COPY\_SRCL} (note the \ic{L} for
list!):

\begin{lstlisting}[language=mps]
node.impl : CalcMethodBSI.body.statements;
\end{lstlisting}




\subsection{The Inside of Blocks}






















 




























