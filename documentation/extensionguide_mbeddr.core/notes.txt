4   Abstract, Intro, Motivation
4   Beispiele
12  Implementierung
3   Related Work & Discussion
1.5 Referenzen 
---------------------------
24.5

weniger embedded, mehr "sprachlicher"
defensiver: soundness bei typen bspw.
  -> muss wissen was man tut.
  -> bestimmte Dinge sind net möglich in unserem C -> einfacher
  -> konstruktive QS
  -> kontextbeschränkung zur vereinfachung
  -> invariant bei Runnables
  -> cleaned up C: function pointer syntactic sugar (ja), 
     kucken, welche DInge wir *wikrlich* diskutieren müssen
	 (angriffsfläche verkleinern)
	 brauchen wir die Header Diskussion
	 
Advanced Modularization:	 
* State Machines can live in modules and components
* C Expr Lang is used in NuSMV
	 
-> explizit Nierstrasz Dinge angehen... abgrenzen; related work!
   wir können's mit allen Srpachen, nicht nur Smalltalk.

Optional Ports (erkennung, with port) als Advantage von Sprachextension statt if?
   
Anfang: Schichtung
Language Engineering ist im Embedded Bereich wichtig!!! Nicht nur OO!!
Aber das geht in anderen Sprachen/Domänen auch.
Pragmatisch, praktisch (nicht nur theoretisch).
Weiteres Beispiel: Expression Language in NuSMV
  (eine Art der Wiederverwendung. Einschränkung!) 
  
unsere aufteilung des Kerns in versch Module ist eine "Strikterisierung"
  der natürlichen Teile von Sprachen.
   
Related Work: 
Andere LWB/Sprachmod-Technologien: Packrat, Combinators, Eelco's Zeug
  -> IDE gibt's hier mit.
  

Titel: 
  Incremental, layered C language and IDE extension in Embedded Programming
  
  

  
  
  
  
  
   


--------------------------------


* Modularized Languages for Embedded Development are useful.
  They support an approach to programming that mixes DSLs and GPLs.
  -> see MoDELS 2010 paper
* We have identified several modularitazion paradigms -> AOSD paper
  and describe how to implement these these with MPS in 
* MPS is a projectional editor, which means that it works the
  following way... -> GTTSE paper


### Solution Approach

"expression problem"
"independent extensibility"

### Example-based Evaluation
in this paper we show that it is feasible to develop a modular C and validate our approach by integrating common/typical extensions
in the language that are relevant for embedded development

address the problems and explain how we solve them with the
apprach we have; use a concrete example.
Discuss for each of them how they "plug into" the
C base language and what we have learned
* Unit Testing
* CLosures
* Components
* State Machines
^solves the problem! 

and now: how do we do it?


### Solution: The design of an extensible C


extensibility in terms of mm design 
   AND THEN explain how the MPS etc. makes this easy
   
core features of a LWB that enable this stuff -> LMR&C

describe the infrastructure for doing the examples plus similar other things:
because C has been designed to be extensible


* Changes to default C and why think we can do that
* ... discuss the structure ... of our C


### Related Work

how could this have been done with parsers (Eelco could write this)

xoc
xtc
Safer C
Systems C
Misra