\relax 
\@writefile{toc}{\contentsline {title}{mbeddr C Extension Guide}{2}}
\@writefile{toc}{\authcount {4}}
\@writefile{toc}{\contentsline {author}{Markus Voelter\unskip {} \and Bernd Kolb\unskip {} \and Daniel Ratiu\unskip {}\and \unskip \ \ignorespaces  Bernhard Schaetz\unskip {}}{2}}
\@writefile{toc}{\contentsline {section}{\numberline {1}Introduction}{2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.1}Specific Challenges in Embedded Development}{2}}
\newlabel{challenges}{{1.1}{2}}
\@writefile{toc}{\contentsline {paragraph}{$C_1$: Abstraction without Runtime Cost}{2}}
\@writefile{toc}{\contentsline {paragraph}{$C_2$: Static Checks and Verification}{2}}
\@writefile{toc}{\contentsline {paragraph}{$C_3$: C considered Harmful}{3}}
\@writefile{toc}{\contentsline {paragraph}{$C_4$: Inclusion of Meta Data}{3}}
\@writefile{toc}{\contentsline {paragraph}{$C_5$: Tool Integration}{3}}
\@writefile{toc}{\contentsline {paragraph}{$C_6$: Product Line Support}{4}}
\@writefile{toc}{\contentsline {section}{\numberline {2}Solution Approach}{4}}
\newlabel{solapproach}{{2}{4}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1}Language Extension}{4}}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces Abstractions expressed in higher level languages (e.g. state machines or components) are progressively reduced to their lower-level equivalent. At the end, C text is generated that is subsequently compiled.}}{5}}
\newlabel{reduction}{{1}{5}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2}Ways to extend C}{5}}
\newlabel{ways}{{2.2}{5}}
\@writefile{toc}{\contentsline {paragraph}{$W_1$: Top Level Constructs}{5}}
\@writefile{toc}{\contentsline {paragraph}{$W_2$: Statements}{5}}
\@writefile{toc}{\contentsline {paragraph}{$W_3$: Expressions}{6}}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces A decision table expression. It evaluates to the value in the cell for which the row and column header boolean expressions are true. If none is true, the default value \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {-1}\normalfont   is applied.}}{6}}
\newlabel{dectab}{{2}{6}}
\@writefile{toc}{\contentsline {paragraph}{$W_4$: Types and Literals}{6}}
\@writefile{toc}{\contentsline {paragraph}{$W_5$: Transformation}{6}}
\@writefile{toc}{\contentsline {paragraph}{$W_6$: Meta Data Decoration}{6}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.3}Using the Extensible C}{6}}
\newlabel{usingC}{{2.3}{6}}
\@writefile{toc}{\contentsline {paragraph}{A cleaned up C}{6}}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces Modules form the top-level container in our C. They can import other modules, whose exported contents become visible to the importing module.}}{7}}
\newlabel{moduleexample}{{3}{7}}
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces The function \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {each}\normalfont   is a higher order function takes takes a reference to another function as its third argument. That function has to take one \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {int}\normalfont   as the argument and return an \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {int}\normalfont  . From main we call this \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {each}\normalfont   with a reference to \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {times2}\normalfont   and with a lambda that multiplies by three.}}{8}}
\newlabel{funpointerexample}{{4}{8}}
\@writefile{toc}{\contentsline {paragraph}{Decision Tables (adressing $W_3$)}{8}}
\@writefile{toc}{\contentsline {paragraph}{Unit Tests}{8}}
\@writefile{lof}{\contentsline {figure}{\numberline {5}{\ignorespaces Test cases are new top level constructs. The \emph  {unittest} language also introduces the \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {assert}\normalfont   and \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {fail}\normalfont   statements which can only be used inside of a test case. The arguments to \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {assert}\normalfont   and \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {fail}\normalfont   denote the index of the statement. In error messages this number is output as a way of finding the cause in the code. These indexes are automatically projected and cannot be changed in the editor.}}{8}}
\newlabel{testcase}{{5}{8}}
\@writefile{toc}{\contentsline {paragraph}{State Machines}{8}}
\@writefile{lof}{\contentsline {figure}{\numberline {6}{\ignorespaces A state machine embedded into a C module. It declares in and out events as well as local variables, states and transitions. Transitions react to in events and out events can be created in actions. State machines can be verified with the NuSMV model checker, a topic not discussed further in this paper. Through bindings (not shown) they can interact with surrounding C code, e.g. by calling functions when an out event is created.}}{9}}
\newlabel{components}{{6}{9}}
\@writefile{toc}{\contentsline {paragraph}{Components}{9}}
\@writefile{toc}{\contentsline {paragraph}{Physical Units}{9}}
\@writefile{lof}{\contentsline {figure}{\numberline {7}{\ignorespaces Two components providing the same interface. The \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {<-}\normalfont   notation maps operations offered through provided ports to their implementation in components.}}{10}}
\newlabel{components}{{7}{10}}
\@writefile{toc}{\contentsline {paragraph}{Requirements Traces}{10}}
\@writefile{lof}{\contentsline {figure}{\numberline {8}{\ignorespaces Requirements traces can be attached to any program element of any language. An intention (pressing Alt-Enter and selecting \emph  {Add Trace}) is used to attach them.}}{10}}
\newlabel{traces}{{8}{10}}
\@writefile{toc}{\contentsline {paragraph}{Presence Conditions}{10}}
\@writefile{toc}{\contentsline {paragraph}{Safe Modules}{11}}
\@writefile{toc}{\contentsline {section}{\numberline {3}Design and Implementation}{11}}
\newlabel{design}{{3}{11}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1}MPS Basics}{11}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.2}The Core Languages}{12}}
\@writefile{lof}{\contentsline {figure}{\numberline {9}{\ignorespaces Languages and their dependencies for \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {com.mbeddr.core}\normalfont   representing the C programming language plus support for unit testing and make-based build.}}{12}}
\newlabel{corelangdeps}{{9}{12}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3}Addressing $W_1$: Top-Level Constructs}{12}}
\@writefile{lof}{\contentsline {figure}{\numberline {10}{\ignorespaces This constraint restricts an \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {AssertStatement}\normalfont   to be used only inside a \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {TestCase}\normalfont   by checking that, from the assert's perspective, any of the ancestors is a \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {TestCase}\normalfont  .}}{13}}
\newlabel{assertConstraints}{{10}{13}}
\@writefile{lof}{\contentsline {figure}{\numberline {11}{\ignorespaces Two-stage transformation of \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {TestCase}\normalfont  s. The \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {TestCase}\normalfont   is transformed into a C function using the logging framework to output error messages. The \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {report}\normalfont   statement is then transformed in turn into a \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {printf}\normalfont   statement \emph  {if} we generate for the Windows/Mac environment. It would be transformed to something else if we generated for the actual target device.}}{14}}
\newlabel{unittest2c}{{11}{14}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.4}Addressing $W_2$: Statements}{14}}
\@writefile{lof}{\contentsline {figure}{\numberline {12}{\ignorespaces A \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {safeheap}\normalfont   statement declares a number of heap variables. These are then automatically allocated and can be used inside the body of the statement. When the body is left, the memory is automatically freed.}}{14}}
\newlabel{safeheap}{{12}{14}}
\@writefile{lof}{\contentsline {figure}{\numberline {13}{\ignorespaces A \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {safeheap}\normalfont   statement implements the two methods declared by the \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {ILocalVarScopeProvider}\normalfont   interface. \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {getContainedLocalVariables}\normalfont   returns the \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {LocalVarDecls}\normalfont   that it declares between the parentheses (see Fig.\nobreakspace  {}12\hbox {}). \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {getLocalVarScope}\normalfont   constructs a scope that contains these variables and then builds the hierarchy of outer scopes by relying on its ancestors that implement \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {ILocalVarScopeProvider}\normalfont  .}}{15}}
\newlabel{safeheapbehaviour}{{13}{15}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.5}Addressing $W_3$: Expressions}{15}}
\@writefile{lof}{\contentsline {figure}{\numberline {14}{\ignorespaces The type calculation equations for the decision table (see the comments for details).}}{16}}
\newlabel{dectabtyping}{{14}{16}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.6}Addressing $W_4$: Types and Literals}{16}}
\@writefile{lof}{\contentsline {figure}{\numberline {15}{\ignorespaces The \emph  {units} extension supports data types and literals with physical units. A \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {UnitDeclaration}\normalfont   specifies the unit and the base type. Type checks ensure that the values associated with unit literals are the correct type (\fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {10.2kg}\normalfont   would not be allowed in the example). The typing rules for the existing \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {+}\normalfont   and \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {==}\normalfont   operators must be overridden to support types with units.}}{17}}
\newlabel{unitsexample}{{15}{17}}
\@writefile{lof}{\contentsline {figure}{\numberline {16}{\ignorespaces The \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {visibleContentsOfType}\normalfont   operation returns all instances of the passed in concept in the current module, as well as all exported instances in modules imported by the current module. The \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {select}\normalfont   clause casts down each content to a \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {UnitDeclaration}\normalfont  , which is safe, because we pass in \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {concept/UnitDeclaration/}\normalfont   to \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {visibleContentsOfType}\normalfont  .}}{17}}
\newlabel{scoping}{{16}{17}}
\@writefile{lof}{\contentsline {figure}{\numberline {17}{\ignorespaces An overloaded operations container declares the language concept and the types of the left and right arguments for which this rule applies, plus an optional applicability condition. In this case we make sure we can only add two numbers if the use \emph  {the same} unit (more sophisticated unit compatibility rules could be added here). The resulting type is a copy of the left operand's type (same as the right one, so we can choose either).}}{18}}
\newlabel{ovopcont}{{17}{18}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.7}Addressing $W_5$: Alternative Transformations}{18}}
\@writefile{lof}{\contentsline {figure}{\numberline {18}{\ignorespaces This is the \emph  {right transformation} which transforms a \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {Literal}\normalfont   into a \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {LiteralWithUnit}\normalfont   if the name of a \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {UnitDeclaration}\normalfont   is typed in on the right side of a \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {Literal}\normalfont  . The \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {matching test}\normalfont   block checks if one of the visible unit declaration starts with the text that has been entered so far. If so, the \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {do transform}\normalfont   block is executed, which, once we finished entering a complete name, replaces the \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {Literal}\normalfont   with a new instance of \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {LiteralWithUnit}\normalfont   using the original \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {Literal}\normalfont  's value and the unit whose name was entered. }}{19}}
\newlabel{righttransform}{{18}{19}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.8}Addressing $W_6$: Meta Data}{19}}
\@writefile{lof}{\contentsline {figure}{\numberline {19}{\ignorespaces This \emph  {reduction rule} transforms \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {PlusExpression}\normalfont   into a call to a library function \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {addWithRangeChecks}\normalfont  , passing in the left and right argument of the \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {+}\normalfont   using the two \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {COPY\_SRC}\normalfont   macros. Using the \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {condition}\normalfont   expression, the transformation is only executed if the containing \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {Module}\normalfont   has a \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {safeAnnotation}\normalfont   attached to it and the type of both arguments of the \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {+}\normalfont   are \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {UnitType}\normalfont  s.}}{20}}
\newlabel{safetransformation}{{19}{20}}
\@writefile{lof}{\contentsline {figure}{\numberline {20}{\ignorespaces The editor definition for the \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {ReqTrace}\normalfont   annotation. It consits of a vertical list \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {[/ .. /]}\normalfont   with two lines. The first line contains the reference to the reference requirement. The second line uses the \fontfamily  {cmtt}\fontseries  {m}\fontshape  {n}\selectfont  {attributed node}\normalfont   construct to "delegate" to the editor of the program node to which this annotation is attached. So the annotation is always rendered right on top of whatever syntax the orginal node uses.}}{20}}
\newlabel{annotation}{{20}{20}}
