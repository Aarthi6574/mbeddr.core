// mbeddr properties
// setting mbeddrMajor
if (project.hasProperty('mbeddrMajor')) {
    ext.mbeddrMajor = project.getProperty('mbeddrMajor')
} else {
    ext.mbeddrMajor = "1"
}

// setting mbeddrMinor
if (project.hasProperty('mbeddrMinor')) {
    ext.mbeddrMinor = project.getProperty('mbeddrMinor')
} else {
    ext.mbeddrMinor = "0"
}

// setting mbeddrBuild
if (project.hasProperty('mbeddrBuild')) {
    ext.mbeddrBuild = project.getProperty('mbeddrBuild')
} else {
    def gitBranch
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        gitBranch ='cmd /c git rev-parse --abbrev-ref HEAD'.execute().in.text.trim().toString().replace("/","-")
    } else {
        gitBranch ='git rev-parse --abbrev-ref HEAD'.execute().in.text.trim().toString().replace("/","-")
    }

    if (gitBranch == null || gitBranch.empty) {
        gitBranch = 'HEAD'
    }
    ext.mbeddrBuild = gitBranch + "-SNAPSHOT"
}

ext.mbeddrBuildNumber = mbeddrMajor + "." + mbeddrMinor + "-" + mbeddrBuild

// cbmc properties
ext.cbmcMajor = "0.9"
ext.cbmcMinor = "1"
ext.cbmc_groupId = "org.cprover"
ext.cbmc_artifactId_mac = "cbmc-mac"
ext.cbmc_artifactId_linux = "cbmc-linux"
ext.cbmc_artifactId_win = "cbmc-win"
ext.cbmc_version = mbeddrMajor + "." + mbeddrMinor + "-SNAPSHOT"
ext.cbmc_resolveDir = "/cbmc/"

// download jre credentials
ext.serverUser = project.hasProperty('serverUser') ? project.getProperty('serverUser') : '<user>'
ext.serverPassword = project.hasProperty('serverPassword') ? project.getProperty('serverPassword') : '<password>'

// ant targets
ext.CleanGeneratedCode_Task = "cleanSources"
ext.CleanPlugins_Task = "clean"
ext.GenerateCode_Task = "generate"
ext.BuildPlugin_Task = "assemble"
ext.RunTests_Task = "check"
ext.script_targets = ['clean', 'generate', 'assemble']
ext.assemble_targets = ['clean', 'assemble']
ext.test_targets = ['clean', 'generate', 'assemble', 'check']
ext.languages_targets = ['clean', 'generate', 'assemble']
ext.ex_tests_targets = ['clean', 'generate']
ext.rcp_targets = ['clean', 'build']

// path variables
def mpsHomeDir = new File(rootDir, "MPS/MPS-mbeddr-$mpsBuild/")
ext.mps_home = '-Dmps.home=' + mpsHomeDir.getAbsolutePath()
ext.build_dir = '-Dbuild.dir=' + file(rootProject.projectDir.absolutePath).getAbsolutePath()
ext.artifacts_root = '-Dartifacts.root=' + file(rootProject.projectDir.absolutePath + "/artifacts").getAbsolutePath()
String buildVersion = '-Dbuild='+mbeddrBuild
String majorVersion = '-Dmajor.version='+mbeddrMajor
String minorVersion = '-Dminor.version='+mbeddrMinor
ext.mbeddr_home = ['-Dmbeddr.github.core.home=' + file(rootProject.projectDir.absolutePath).getAbsolutePath(), minorVersion, majorVersion, buildVersion]
ext.slall_home = ['-Dsl-all.home=' + file(rootProject.projectDir.absolutePath + '/code/plugins/sl-all').getAbsolutePath(), minorVersion, majorVersion, buildVersion]
ext.dependsOnMPS_scriptArgs = ['ant', '-verbose', mps_home, build_dir, artifacts_root]
ext.dependsOnMbeddr_scriptArgs = [*dependsOnMPS_scriptArgs, *mbeddr_home, *slall_home]

// path locations
ext.mbeddrScripts_basePath = file(ant.properties['mbeddr.github.core.home'] + "/build").getAbsolutePath()
ext.allScripts_buildFileLocation = file(mbeddrScripts_basePath + "/" + "com.mbeddr.allScripts").getAbsolutePath()
ext.slAll_buildFileLocation = file(ant.properties['mbeddr.github.core.home'] + "/scripts" + "/" + "sl-all").getAbsolutePath()

// ant script locations
ext.scriptsBasePath = file(rootProject.projectDir.absolutePath + "/scripts/").getAbsolutePath()

// repository urls
configureRepositories()

ant.taskdef(name: "makeTests",
        classname: "com.mbeddr.tools.ant.MakeTestsTask",
        classpath: file(rootProject.projectDir.absolutePath + "/tools/ant/tasks/TeamcityMakeTests.jar")
)

// configs
configurations {
    mps {
        description = 'Dependencies to launch MPS'
    }
    mbeddrAllInOne {
        description = 'mbeddr allInOne'
    }
    mbeddrPlatform {
        description = 'mbeddr platform distribution'
    }
    mbeddrRcp {
        description = 'mbeddr rcp'
    }
    mbeddrJre {
        description = 'jre used for rcp'
    }
    mbeddrDmg {
        description = 'mbeddr dmg for mac'
    }
    cbmcWin {
        description = 'cbmc windows'
    }
    cbmcLinux {
        description = 'cbmc linux'
    }
    cbmcMac {
        description = 'cbmc mac'
    }
    mbeddrTutorial {
        description = 'mbeddr tutorial'
    }
    mbeddrInstaller {
        description = 'mbeddr windows installer'
    }
}

dependencies {
    mps "com.jetbrains:mps:$mpsBuild"
}

// TODO package cbmc
//    cbmcLinux group: cbmc_groupId, name: cbmc_artifactId_linux, version: cbmc_version
//    cbmcMac group: cbmc_groupId, name: cbmc_artifactId_mac, version: cbmc_version
//    cbmcWin group: cbmc_groupId, name: cbmc_artifactId_win, version: cbmc_version

// :build:com.mbeddr.allScripts
def script_build_mbeddrAllScripts = new File(rootProject.projectDir.absolutePath  + "/build/com.mbeddr.allScripts" + "/build.xml")

task build_allScripts(type: Exec, dependsOn: 'resolve_mps') {
    workingDir projectDir
    def args = buildProcSpawnArgList([*dependsOnMbeddr_scriptArgs, *(antScriptLocation(script_build_mbeddrAllScripts)), *languages_targets])
    commandLine (args)
}

def artifactsDir = new File(project.rootDir, 'artifacts')

task publish_allScripts(type: Zip, dependsOn: build_allScripts) {
    archiveName 'com.mbeddr.allScripts.build.zip'
    from artifactsDir
    include "com.mbeddr.allScripts.build/**"
}

publishing {
    publications {
        mbeddrAllScripts(MavenPublication) {
            groupId 'com.mbeddr'
            artifactId 'allScripts'
            version mbeddrBuildNumber
            artifact publish_allScripts
        }
    }
}

// :build:com.mbeddr.build
def script_build_slAll = new File(scriptsBasePath + "/sl-all/" + "build.xml")
def script_build_spawner = new File(scriptsBasePath + "/com.mbeddr.build/" + "spawner.xml")
def script_build_platform = new File(scriptsBasePath + "/com.mbeddr.platform/" + "build.xml")
def script_build_mbeddr = new File(scriptsBasePath + "/com.mbeddr.build/" + "build.xml")

task build_sl_all(type: Exec, dependsOn: 'copy_allScripts') {
    workingDir rootProject.projectDir
    def args = buildProcSpawnArgList([*dependsOnMbeddr_scriptArgs, *(antScriptLocation(script_build_slAll)), *languages_targets])
    commandLine (args)
}

task copy_sl_all_nativelibs(type: Copy, dependsOn: build_sl_all) {
    from zipTree(rootProject.projectDir.absolutePath + "/artifacts/mps-sl-all/mps-sl-all.zip")
    include "de.itemis.mps.nativelibs.loader/"
    into "MPS/MPS-mbeddr/plugins"
}

task build_spawner(type: Exec, dependsOn: copy_sl_all_nativelibs) {
    workingDir rootProject.projectDir
    def args = buildProcSpawnArgList([*dependsOnMbeddr_scriptArgs, *(antScriptLocation(script_build_spawner)), *languages_targets])
    commandLine (args)
}

task copy_spawner(type: Copy, dependsOn: build_spawner) {
    from zipTree(rootProject.projectDir.absolutePath + "/artifacts/spawner/com.mbeddr.spawner.zip")
    into "MPS/MPS-mbeddr/plugins"
}

task build_platform(type: Exec, dependsOn: copy_spawner) {
    workingDir rootProject.projectDir
    def args = buildProcSpawnArgList([*dependsOnMbeddr_scriptArgs, *(antScriptLocation(script_build_platform)), *languages_targets])
    commandLine (args)
}

task build_mbeddr(type: Exec, dependsOn: build_platform) {
    workingDir rootProject.projectDir
    def args = buildProcSpawnArgList([*dependsOnMbeddr_scriptArgs, *(antScriptLocation(script_build_mbeddr)), *languages_targets])
    commandLine (args)
}


// :build:com.mbeddr.tests

// :build:com.mbeddr.platform
publishing {
    publications {
        mbeddrPlatform(MavenPublication) {
            groupId 'com.mbeddr'
            artifactId 'platform'
            version mbeddrBuildNumber
            artifact tasks.publish_mbeddrPlatform
        }
    }
}
def script_build_mbeddrPlatformDistribution = new File(scriptsBasePath + "/com.mbeddr.platform/" + "build-distribution.xml")

task build_platform_distribution(type: Exec, dependsOn: build_platform) {
    workingDir projectDir
    def args = buildProcSpawnArgList([*dependsOnMbeddr_scriptArgs, *(antScriptLocation(script_build_mbeddrPlatformDistribution)), *languages_targets])
    commandLine (args)

    // Support incremental build
    inputs.file(script_build_mbeddrPlatformDistribution)
    inputs.dir("$rootDir/artifacts/mps-sl-all")
    inputs.dir("$rootDir/artifacts/com.mbeddr.platform")
    outputs.dir("$rootDir/artifacts/com.mbeddr.platform.distribution")
}

task publish_mbeddrPlatform(type: Zip, dependsOn: build_platform_distribution) {
    archiveName 'com.mbeddr.platform.distribution.zip'
    from artifactsDir
    include "com.mbeddr.platform.distribution/**"
}

import org.apache.tools.ant.taskdefs.condition.Os

def script_test_mbeddrTutorial = new File(scriptsBasePath + "/com.mbeddr.tutorial/" + "build-tests.xml")
def script_test_mbeddrAnalysisTs = new File(scriptsBasePath + "/com.mbeddr.analyses/" + "build-ts-tests.xml")
def script_test_mbeddrAnalysisEx = new File(scriptsBasePath + "/com.mbeddr.analyses/" + "build-ex-tests.xml")
def script_test_mbeddrPerformance = new File(scriptsBasePath + "/com.mbeddr.core/" + "build-performance-tests.xml")
def script_test_mbeddrPlatform = new File(scriptsBasePath + "/com.mbeddr.platform/" + "build-ts-tests.xml")
def script_test_mbeddrDebugger = new File(scriptsBasePath + "/com.mbeddr.debugger/" + "build-tests.xml")
def script_test_mbeddrCoreEx = new File(scriptsBasePath + "/com.mbeddr.core/" + "build-ex-tests.xml")
def script_test_mbeddrCoreExLibrary = new File(scriptsBasePath + "/com.mbeddr.core/" + "build-aLibrary.xml")
def script_test_mbeddrCoreTs = new File(scriptsBasePath + "/com.mbeddr.core/" + "build-ts-tests.xml")
def script_test_mbeddrCcTs = new File(scriptsBasePath + "/com.mbeddr.cc/" + "build-ts-tests.xml")
def script_test_mbeddrCcEx = new File(scriptsBasePath + "/com.mbeddr.cc/" + "build-ex-tests.xml")
def script_test_mbeddrExtTs = new File(scriptsBasePath + "/com.mbeddr.ext/" + "build-ts-tests.xml")
def script_test_mbeddrExtEx = new File(scriptsBasePath + "/com.mbeddr.ext/" + "build-ex-tests.xml")
def cbmc_linux_tar = "cbmc-linux.tar.gz"
def cbmc_mac_zip = "cbmc-mac.zip"
def cbmc_win_zip = "cbmc-win.zip"



task test_mbeddr_tutorial(type: Exec, dependsOn: 'copy_allScripts') {
    workingDir rootProject.projectDir
    def args = buildProcSpawnArgList([*dependsOnMbeddr_scriptArgs, *(antScriptLocation(script_test_mbeddrTutorial)), *test_targets])
    commandLine (args)
}

task build_mbeddr_analysis_ex(type: Exec, dependsOn: 'copy_allScripts') {
    workingDir rootProject.projectDir
    def args = buildProcSpawnArgList([*dependsOnMbeddr_scriptArgs, *(antScriptLocation(script_test_mbeddrAnalysisEx)), *languages_targets])
    commandLine (args)
}

task test_mbeddr_analysis_ex << {
    ant.makeTests(workingDirectory: rootProject.projectDir.absolutePath + "/code/languages/com.mbeddr.analyses")
}


task resolve_cbmc() << { }

if(Os.isFamily(Os.FAMILY_UNIX) && !Os.isFamily(Os.FAMILY_MAC)) {
    resolve_cbmc.dependsOn 'unzip_cbmcLinuxTar'
} else if(Os.isFamily(Os.FAMILY_WINDOWS)) {
    resolve_cbmc.dependsOn 'unzip_cbmcWinZip'
} else {
    resolve_cbmc.dependsOn 'unzip_cbmcMacZip'
}

task test_mbeddr_analysis_ts(type: Exec, dependsOn: 'copy_allScripts') {
    workingDir rootProject.projectDir
    def args = buildProcSpawnArgList([*dependsOnMbeddr_scriptArgs, *(antScriptLocation(script_test_mbeddrAnalysisTs)), *test_targets])
    commandLine (args)
}

task test_mbeddr_analysis(dependsOn: [test_mbeddr_analysis_ts, build_mbeddr_analysis_ex, test_mbeddr_analysis_ex]) { }



task test_mbeddr_performance(type: Exec, dependsOn: 'copy_allScripts') {
    workingDir rootProject.projectDir
    def args = buildProcSpawnArgList([*dependsOnMbeddr_scriptArgs, *(antScriptLocation(script_test_mbeddrPerformance)), *test_targets])
    commandLine (args)
}

task test_mbeddr_platform(type: Exec, dependsOn: 'copy_allScripts') {
    workingDir rootProject.projectDir
    def args = buildProcSpawnArgList([*dependsOnMbeddr_scriptArgs, *(antScriptLocation(script_test_mbeddrPlatform)), *test_targets])
    commandLine (args)
}

task test_mbeddr_debugger(type: Exec, dependsOn: 'copy_allScripts') {
    workingDir rootProject.projectDir
    def args = buildProcSpawnArgList([*dependsOnMbeddr_scriptArgs, *(antScriptLocation(script_test_mbeddrDebugger)), *test_targets])
    commandLine (args)
}

task build_mbeddr_core_ex(type: Exec, dependsOn: 'copy_allScripts') {
    workingDir rootProject.projectDir
    def args = buildProcSpawnArgList([*dependsOnMbeddr_scriptArgs, *(antScriptLocation(script_test_mbeddrCoreEx)), *languages_targets])
    commandLine(args)
}

task build_mbeddr_core_ex_library(type: Exec, dependsOn: 'copy_allScripts') {
    workingDir rootProject.projectDir
    def args = buildProcSpawnArgList([*dependsOnMbeddr_scriptArgs, *(antScriptLocation(script_test_mbeddrCoreExLibrary)), *languages_targets])
    commandLine(args)
}

task test_mbeddr_core_ts(type: Exec, dependsOn: 'copy_allScripts') {
    workingDir rootProject.projectDir
    def args = buildProcSpawnArgList([*dependsOnMbeddr_scriptArgs, *(antScriptLocation(script_test_mbeddrCoreTs)), *test_targets])
    commandLine (args)
}

task test_mbeddr_core_ex_library << {
    ant.makeTests(workingDirectory: rootProject.projectDir.absolutePath + "/code/languages/com.mbeddr.core/tests/aLibrary/source_gen/aLibrary/lib")
}

task test_mbeddr_core_ex << {
    ant.makeTests(workingDirectory: rootProject.projectDir.absolutePath + "/code/languages/com.mbeddr.core")
}

task test_mbeddr_core(dependsOn: [test_mbeddr_core_ex, test_mbeddr_core_ts]) {

}
test_mbeddr_core_ex_library.dependsOn build_mbeddr_core_ex
test_mbeddr_core_ex.dependsOn test_mbeddr_core_ex_library
test_mbeddr_core_ex_library.dependsOn build_mbeddr_core_ex_library

task test_mbeddr_cc_ex << {
    ant.makeTests(workingDirectory: rootProject.projectDir.absolutePath + "/code/languages/com.mbeddr.cc")
}

task build_mbeddr_cc_ex(type: Exec, dependsOn: 'copy_allScripts') {
    workingDir rootProject.projectDir
    def args = buildProcSpawnArgList([*dependsOnMbeddr_scriptArgs, *(antScriptLocation(script_test_mbeddrCcEx)), *ex_tests_targets])
    commandLine (args)
}

task test_mbeddr_cc_ts(type: Exec, dependsOn: 'copy_allScripts') {
    workingDir rootProject.projectDir
    def args = buildProcSpawnArgList([*dependsOnMbeddr_scriptArgs, *(antScriptLocation(script_test_mbeddrCcTs)), *test_targets])
    commandLine (args)
}

task test_mbeddr_cc(dependsOn: [build_mbeddr_cc_ex, test_mbeddr_cc_ex, test_mbeddr_cc_ts]) {}

task build_mbeddr_ext_ex(type: Exec, dependsOn: 'copy_allScripts') {
    workingDir rootProject.projectDir
    def args = buildProcSpawnArgList([*dependsOnMbeddr_scriptArgs, *(antScriptLocation(script_test_mbeddrExtEx)), *languages_targets])
    commandLine (args)
}

task test_mbeddr_ext_ex << {
    ant.makeTests(workingDirectory: rootProject.projectDir.absolutePath + "/code/languages/com.mbeddr.ext")
}

task test_mbeddr_ext_ts(type: Exec, dependsOn: 'copy_allScripts') {
    workingDir rootProject.projectDir
    def args = buildProcSpawnArgList([*dependsOnMbeddr_scriptArgs, *(antScriptLocation(script_test_mbeddrExtTs)), *test_targets])
    commandLine (args)
}

task test_mbeddr_ext(dependsOn: [build_mbeddr_ext_ex, test_mbeddr_ext_ex, test_mbeddr_ext_ts]) {}

task test_mbeddr(dependsOn: [test_mbeddr_debugger, test_mbeddr_platform, test_mbeddr_core, test_mbeddr_performance, test_mbeddr_tutorial, test_mbeddr_cc, test_mbeddr_ext]) {}

task resolve_cbmcLinux(type: Copy)  {
    from {
        configurations.cbmcLinux.collect { zipTree(it) }
    }
    into rootProject.projectDir.absolutePath + cbmc_resolveDir
}

task unzip_cbmcLinuxTar(type: Copy, dependsOn: resolve_cbmcLinux)  {
    from tarTree(rootProject.projectDir.absolutePath + cbmc_resolveDir + cbmc_linux_tar)
    into file(rootProject.projectDir.absolutePath + cbmc_resolveDir)
}

task resolve_cbmcMac(type: Copy)  {
    from {
        configurations.cbmcMac.collect { zipTree(it) }
    }
    into rootProject.projectDir.absolutePath + cbmc_resolveDir
}

task unzip_cbmcMacZip(type: Copy, dependsOn: resolve_cbmcMac)  {
    from zipTree(rootProject.projectDir.absolutePath + cbmc_resolveDir + cbmc_mac_zip)
    into file(rootProject.projectDir.absolutePath + cbmc_resolveDir)
}

task resolve_cbmcWin(type: Copy)  {
    from {
        configurations.cbmcWin.collect { zipTree(it) }
    }
    into rootProject.projectDir.absolutePath + cbmc_resolveDir
}

task unzip_cbmcWinZip(type: Copy, dependsOn: resolve_cbmcWin)  {
    from zipTree(rootProject.projectDir.absolutePath + cbmc_resolveDir + cbmc_win_zip)
    into file(rootProject.projectDir.absolutePath + cbmc_resolveDir)
}

// :build:com.mbeddr.allInOne
publishing {
    publications {
        mbeddrAllInOne(MavenPublication) {
            groupId 'com.mbeddr'
            artifactId 'allInOne'
            version mbeddrBuildNumber
            artifact(publish_all_in_one) {}
        }
    }
}

def script_build_mbeddrAllInOne = new File(scriptsBasePath + "/com.mbeddr.allInOne/" + "build.xml")

task build_all_in_one(type: Exec, dependsOn: 'copy_allScripts') {
    workingDir projectDir
    def args = buildProcSpawnArgList([*dependsOnMbeddr_scriptArgs, *(antScriptLocation(script_build_mbeddrAllInOne)), *languages_targets])
    commandLine (args)
}

task publish_all_in_one(type: Zip, dependsOn: build_all_in_one) {
    from rootProject.projectDir.absolutePath + "/artifacts/"
    include "com.mbeddr.allInOne/com.mbeddr.allInOne.zip"
}

// :build:com.mbeddr.rcp
publishing {
    publications {
        mbeddrRcp(MavenPublication) {
            groupId 'com.mbeddr'
            artifactId 'rcp'
            version mbeddrBuildNumber
            artifact(publish_mbeddrRCP) {}
        }
        mbeddrJre(MavenPublication) {
            groupId 'com.mbeddr'
            artifactId 'jre'
            version mbeddrBuildNumber
            artifact(publish_JRE) {}
        }
    }
}
def script_build_mbeddrRCPMPS = new File(scriptsBasePath + "/com.mbeddr.rcp/" + "mps.xml")
def script_build_mbeddrRCPDistribution = new File(scriptsBasePath + "/com.mbeddr.rcp/" + "mpsDistribution.xml")
def script_build_mbeddrJRE = new File(rootProject.projectDir.absolutePath + "/buildUtil/" + "build.xml")

task build_mbeddrRCP(type: Exec, dependsOn: ['resolve_mps', 'build_allScripts', 'resolveAllInOne', 'unzipTutorial']) {
    workingDir rootProject.projectDir
    def args = buildProcSpawnArgList([*dependsOnMbeddr_scriptArgs, *(antScriptLocation(script_build_mbeddrRCPMPS)), *languages_targets])
    commandLine (args)
}

task build_mbeddrRCPDistributuion(type: Exec, dependsOn: build_mbeddrRCP) {
    workingDir rootProject.projectDir
    def args = buildProcSpawnArgList([*dependsOnMbeddr_scriptArgs, *(antScriptLocation(script_build_mbeddrRCPDistribution)), *assemble_targets])
    commandLine (args)
}

task publish_mbeddrRCP(type: Zip, dependsOn: build_mbeddrRCPDistributuion) {
    from rootProject.projectDir.absolutePath + "/artifacts/mpsDistribution"
    include "*.zip"
    include "*.tar.gz"
}

// invoke this task from the cmd via 'gradle download_jre -PserverUser=<user> -PserverPassword=<password>'
task download_JRE(type: Exec) {
    workingDir rootProject.projectDir
    def args = ['-Dserver.user='+serverUser, '-Dserver.password='+serverPassword, '-f', script_build_mbeddrJRE]
    commandLine('ant', *args, 'get-jdk')
}

task publish_JRE(type: Zip, dependsOn: download_JRE) {
    from rootProject.projectDir.absolutePath + "/buildUtil"
    include "jdk.zip"
    include "jdk..tar.gz"
}

// :build:com.mbeddr.release
publishing {
    publications {
        mbeddrDmg(MavenPublication) {
            groupId 'com.mbeddr'
            artifactId 'dmg'
            version mbeddrBuildNumber
            artifact(publish_mbeddr_dmg) {}
        }
        mbeddrInstaller(MavenPublication) {
            groupId 'com.mbeddr'
            artifactId 'installer'
            version mbeddrBuildNumber
            artifact(publish_installer) {}
        }
    }
}
def script_build_mbeddrDMG = new File(rootProject.projectDir.absolutePath + "/buildUtil/" + "build.xml")
def script_build_installer = new File(rootProject.projectDir.absolutePath + "/build/com.mbeddr.release/" + "build-installer.bat")


task resolveMacRCP(type: Copy) {
    from rootProject.projectDir.absolutePath + "/artifacts/mpsDistribution/"
    into rootProject.projectDir.absolutePath + "/buildUtil"
}

task package_dmg(type: Exec, dependsOn: resolveMacRCP) {
    workingDir rootProject.projectDir.absolutePath + "/buildUtil"
    def args = buildProcSpawnArgList(['ant', '-f', script_build_mbeddrDMG, 'macbuild'])
    commandLine (args)
}

task publish_mbeddr_dmg(type: Zip, dependsOn: package_dmg) {
    from rootProject.projectDir.absolutePath + "/buildUtil"
    include "*.dmg"
}

task copy_jdk(type: Copy) {
    from {
        zipTree(rootProject.projectDir.absolutePath + "/buildUtil/" + "jdk.zip")
    }
    into rootProject.projectDir.absolutePath + "/build/com.mbeddr.release/files/mbeddr/"
}

task copy_rcp(type: Copy) {
    from {
        zipTree(rootProject.projectDir.absolutePath + "/artifacts/mpsDistribution/" + "mbeddr-win.zip")
    }
    into rootProject.projectDir.absolutePath + "/build/com.mbeddr.release/files/mbeddr/"
}

task resolve_cbmcWinForInstaller(type: Copy)  {
    from {
        configurations.cbmcWin.collect { zipTree(it) }
    }
    into rootProject.projectDir.absolutePath + "/artifacts/cbmc"
}

task unzip_cbmcWinZipForInstaller(type: Copy, dependsOn: resolve_cbmcWinForInstaller)  {
    from zipTree(rootProject.projectDir.absolutePath + "/artifacts/cbmc/"+ "cbmc-win.zip")
    into file(rootProject.projectDir.absolutePath + "/build/com.mbeddr.release/files/3rd-party/cbmc")
}

task unzip_nsis(type: Copy) {
    from(zipTree(rootProject.projectDir.absolutePath + "/NSIS/NSIS.zip")) { }
    into rootProject.projectDir.absolutePath + "/build/com.mbeddr.release/NSIS/"
}

task build_installer(type: Exec, dependsOn: ['copy_jdk', 'copy_rcp', 'unzip_nsis', 'unzip_cbmcWinZipForInstaller']) {
    workingDir rootProject.projectDir.absolutePath + "/build/com.mbeddr.release"
    commandLine 'cmd', '/C', 'start', 'NSIS\\NSIS\\makensis.exe', 'mbeddr.nsi'
}

task publish_installer(type: Zip, dependsOn: build_installer) {
    from rootProject.projectDir.absolutePath + "/build/com.mbeddr.release/"
    include "*.exe"
}
// :build:com.mbeddr.analyses.cbmc
publishing {
    publications {
        cbmcMac(MavenPublication) {
            groupId cbmc_groupId
            artifactId cbmc_artifactId_mac
            version cbmc_version
            artifact(publish_cbmcMac) {}
        }
        cbmcLinux(MavenPublication) {
            groupId cbmc_groupId
            artifactId cbmc_artifactId_linux
            version cbmc_version
            artifact(publish_cbmcLinux) {}
        }
        cbmcWin(MavenPublication) {
            groupId cbmc_groupId
            artifactId cbmc_artifactId_win
            version cbmc_version
            artifact(publish_cbmcWin) {}
        }
    }
}
def script_build_cbmcWin = new File(rootProject.projectDir.absolutePath + "/build" + "/com.mbeddr.analyses.cbmc/" + "build-cbmc-win.bat")
def script_build_cbmcLinux = new File(rootProject.projectDir.absolutePath + "/build" + "/com.mbeddr.analyses.cbmc/" + "build-cbmc-linux.sh")
def script_build_cbmcMac = new File(rootProject.projectDir.absolutePath + "/build" + "/com.mbeddr.analyses.cbmc/" + "build-cbmc-mac.sh")

File cbmcSrcHome = file(rootProject.projectDir.absolutePath + "/../cbmc/src")
File cbmcHome = file(rootProject.projectDir.absolutePath + "/../cbmc/")

task build_cbmcWin(type: Exec) {
    workingDir cbmcSrcHome
    commandLine(script_build_cbmcWin)
}

task build_cbmcMac(type: Exec) {
    workingDir cbmcSrcHome
    def args = buildProcSpawnArgList([script_build_cbmcMac])
    commandLine(args)
}

task build_cbmcLinux(type: Exec) {
    workingDir cbmcSrcHome
    def args = buildProcSpawnArgList([script_build_cbmcLinux])
    commandLine(args)
}

task publish_cbmcWin(type: Zip) {
    from file(cbmcHome.absolutePath + "/" + "cbmc-win.zip")
}

task publish_cbmcMac(type: Zip) {
    from file(cbmcHome.absolutePath + "/" + "cbmc-mac.zip")
}

task publish_cbmcLinux(type: Zip) {
    from file(cbmcHome.absolutePath + "/" + "cbmc-linux.tar.gz")
}

task resolveAllInOne(type: Copy)  {
    from {
        configurations.mbeddrAllInOne.collect { zipTree(it) }
    }
    into rootProject.projectDir.absolutePath + "/artifacts/"
}

task resolveTutorial(type: Copy)  {
    from {
        configurations.mbeddrTutorial.collect { zipTree(it) }
    }
    into rootProject.projectDir.absolutePath + "/artifacts"
}

task unzipTutorial(type: Copy, dependsOn: resolveTutorial)  {
    from zipTree(rootProject.projectDir.absolutePath + "/artifacts/" + "com.mbeddr.tutorial.zip")
    into file(rootProject.projectDir.absolutePath + "/artifacts/" + "com.mbeddr.tutorial")
}

task resolve_mps(type: Copy) {
    dependsOn configurations.mps
    from {
        configurations.mps.resolve().collect { zipTree(it) }
    }
    into mpsHomeDir
}

tasks.create(name: 'copy_allScripts', type: Copy, dependsOn: build_allScripts) {
    from rootDir.path + "/build"
    from rootDir.path + "/code/plugins"
    into rootDir.path + "/scripts/"
    include "*/*.xml"
}

def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

// constructs the argument list that is used for spawning processes on linux/mac and windows
Iterable<String> buildProcSpawnArgList(Iterable<String> args) {
    List<String> newArguments = new ArrayList<String>()
    if(Os.isFamily(Os.FAMILY_WINDOWS)) {
        // we append the 'cmd /c' command in front
        newArguments.add(0,'cmd.exe')
        newArguments.add(1,'/c')
    }
    newArguments.addAll(args.toList())
    return newArguments
}

Iterable<String> antScriptLocation(Object antScriptLocation) {
    return ['-f', antScriptLocation]
}

// :build:com.mbeddr.tutorial

publishing {
    publications {
        mbeddrTutorial(MavenPublication) {
            groupId 'com.mbeddr'
            artifactId 'tutorial'
            version mbeddrBuildNumber
            artifact(publish_mbeddrTutorial) {}
        }
    }
}

def script_build_tutorialLanguages = new File(scriptsBasePath + "/com.mbeddr.tutorial/" + "build-languages.xml")
def script_build_tutorialSolutions = new File(scriptsBasePath + "/com.mbeddr.tutorial/" + "build-solutions.xml")


task build_tutorial_languages(type: Exec) {
    workingDir rootProject.projectDir
    def args = buildProcSpawnArgList([*dependsOnMbeddr_scriptArgs, *(antScriptLocation(script_build_tutorialLanguages)), *languages_targets])
    commandLine (args)
}

task build_tutorial_solutions(type: Exec, dependsOn: build_tutorial_languages) {
    workingDir rootProject.projectDir
    def args = buildProcSpawnArgList([*dependsOnMbeddr_scriptArgs, *(antScriptLocation(script_build_tutorialSolutions)), *languages_targets])
    commandLine (args)
}

task build_tutorial(dependsOn: build_tutorial_solutions) { }

task package_tutorial(type: Zip) {
    from rootProject.projectDir.absolutePath + "/code/applications/tutorial"
    destinationDir  new File(rootProject.projectDir.absolutePath + "/artifacts/" + "com.mbeddr.tutorial")
    archiveName "com.mbeddr.tutorial.zip"
}

task publish_mbeddrTutorial(type: Zip, dependsOn: package_tutorial) {
    from rootProject.projectDir.absolutePath + "/artifacts/" + "com.mbeddr.tutorial"
}

private void configureRepositories() {
    project.ext.repository = project.hasProperty('mbeddrRelease') ? project.releaseRepository : project.snapshotRepository

    publishing {
        repositories {
            maven {
                url project.repository
                if (project.hasProperty('nexusUsername')) {
                    credentials {
                        username project.nexusUsername
                        password project.nexusPassword
                    }
                }
            }
        }
    }
    repositories {
        mavenLocal()
        for (repoUrl in [project.snapshotRepository, project.releaseRepository]) {
            maven {
                url repoUrl
                if (project.hasProperty('nexusUsername')) {
                    credentials {
                        username project.nexusUsername
                        password project.nexusPassword
                    }
                }
            }
        }
    }
}
