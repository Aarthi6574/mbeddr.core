import org.apache.tools.ant.taskdefs.condition.Os

// setting mbeddrMajor
if (project.hasProperty('mbeddrMajor')) {
    ext.mbeddrMajor = project.getProperty('mbeddrMajor')
} else {
    ext.mbeddrMajor = "1"
}

// setting mbeddrMinor
if (project.hasProperty('mbeddrMinor')) {
    ext.mbeddrMinor = project.getProperty('mbeddrMinor')
} else {
    ext.mbeddrMinor = "0"
}

ext.mbeddrBuildNumber = "${mbeddrMajor}.${mbeddrMinor}.${getGitCommitCount()}.g${getGitShortCommitHash()}"

// setting mbeddrBuild
if (project.hasProperty('mbeddrBuild')) {
    ext.mbeddrBuild = project.getProperty('mbeddrBuild')
} else {
    ext.mbeddrBuild = getGitBranch()
}

if (ext.mbeddrBuild != 'master') {
    ext.mbeddrBuildNumber = "${mbeddrBuild}.${mbeddrBuildNumber}"
}

// path variables
ext.mpsHomeDir = new File(rootDir, "MPS/MPS-mbeddr-$mpsBuild/")
ext.mps_home = '-Dmps.home=' + mpsHomeDir.getAbsolutePath()
ext.build_dir = '-Dbuild.dir=' + file(rootProject.projectDir.absolutePath).getAbsolutePath()
ext.artifacts_root = '-Dartifacts.root=' + file(rootProject.projectDir.absolutePath + "/artifacts").getAbsolutePath()
String buildVersion = '-Dbuild='+mbeddrBuild
String majorVersion = '-Dmajor.version='+mbeddrMajor
String minorVersion = '-Dminor.version='+mbeddrMinor
ext.mbeddr_home = ['-Dmbeddr.github.core.home=' + file(rootProject.projectDir.absolutePath).getAbsolutePath(), minorVersion, majorVersion, buildVersion]
ext.slall_home = ['-Dsl-all.home=' + file(rootProject.projectDir.absolutePath + '/code/plugins/sl-all').getAbsolutePath(), minorVersion, majorVersion, buildVersion]
ext.dependsOnMPS_scriptArgs = ['ant', '-verbose', mps_home, build_dir, artifacts_root]
ext.dependsOnMbeddr_scriptArgs = [*dependsOnMPS_scriptArgs, *mbeddr_home, *slall_home]

// path locations
ext.mbeddrScripts_basePath = file(ant.properties['mbeddr.github.core.home'] + "/build").getAbsolutePath()
ext.allScripts_buildFileLocation = file(mbeddrScripts_basePath + "/" + "com.mbeddr.allScripts").getAbsolutePath()
ext.slAll_buildFileLocation = file(ant.properties['mbeddr.github.core.home'] + "/scripts" + "/" + "sl-all").getAbsolutePath()

// ant script locations
ext.scriptsBasePath = rootProject.file("scripts").absolutePath

ant.taskdef(name: "makeTests",
        classname: "com.mbeddr.tools.ant.MakeTestsTask",
        classpath: file(rootProject.projectDir.absolutePath + "/tools/ant/tasks/TeamcityMakeTests.jar")
)

// mbeddr properties
subprojects {
    // repository urls
    configureRepositories(it)

    // configs
    configurations {
        mps
    }

    dependencies {
        mps "com.jetbrains:mps:$mpsBuild"
    }
}

private static getGitShortCommitHash() {
    return getCommandOutput('git rev-parse --short HEAD')
}

private static int getGitCommitCount() {
    return getCommandOutput('git rev-list --count HEAD').toInteger()
}

/**
 * Gets the current Git branch from Git or from an environment variable (in the future) with slashes ('/') replaced by
 * dashes ('-'). If the branch name cannot be determined, throws GradleException. Never empty, never null.
 *
 * @return the current branch name with slashes ('/') replaced by dashes ('-')
 * @throws GradleException if the branch name cannot be determined
 */
private static String getGitBranch() throws GradleException {
    String gitBranch = getCommandOutput('git rev-parse --abbrev-ref HEAD').replace("/", "-")

    if (gitBranch == null || gitBranch.empty) {
        throw new GradleException('Could not determine Git branch name')
    }

    return gitBranch
}

private static String getCommandOutput(String command) {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        command = 'cmd /c ' + command
    }
    return command.execute().in.text.trim()
}

File scriptFile(String relativePath) {
    new File("$rootDir/scripts/$relativePath")
}

private static void configureRepositories(Project project) {
    project.ext.repository = project.mbeddrBuild.endsWith('-SNAPSHOT') ? project.snapshotRepository : project.releaseRepository

    project.publishing {
        repositories {
            maven {
                url project.repository
                if (project.hasProperty('nexusUsername')) {
                    credentials {
                        username project.nexusUsername
                        password project.nexusPassword
                    }
                }
            }
        }
    }
    project.repositories {
        mavenLocal()
        for (repoUrl in [project.snapshotRepository, project.releaseRepository]) {
            maven {
                url repoUrl
                if (project.hasProperty('nexusUsername')) {
                    credentials {
                        username project.nexusUsername
                        password project.nexusPassword
                    }
                }
            }
        }
    }
}

task printVersion {
    doLast {
        println "mbeddrBuildNumber: ${mbeddrBuildNumber}"
    }
}